@page
@model ProjManagmentSystem.Pages.SubtasksModel
@{
	ViewData["Title"] = "Subtasks";
}

<div class="page-container">
    <div class="header" style="margin-top: 80px;">
        <h1>Доска подзадач @Model.TaskName</h1>

        @if (Model.IsPermissionToCreateAndEdit)
        {
            <form method="post">
                <button id="addSubTaskButton" type="button" class="button">Добавить подзадачу</button>
            </form>
        }
        <input id="taskIdInput" style="display: none;" value="@Model.TaskId"/>
    </div>
    <hr class="header-line">

    <div class="status-columns">
        <div id="status-new" class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;" ondrop="drop(event)" ondragover="allowDrop(event)">
            <div class="status-title">новыe</div>
            @{
                int count = 0;
            }
            @foreach (var i in Model.subtasks)
            {
                if (i.status == "Новая" && (!Model.TaskId.HasValue || i.task == Model.TaskId.Value))
                {
                    count++;
                    <div id="subtask-@i.id"
                         style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;position:relative;"
                         data-project-name="@i.name" draggable="true" ondragstart="dragStart(event)"
                         onclick="handleSubtaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.responsible', '@i.task', '@i.expected_date.ToString("dd.MM.yyyy")')"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        @if (i.IsUrgent)
                        {
                            <img src="~/Images/fire.png"
                                 style="position: absolute; top: 8px; right: 12px; width: 40px; height: 40px;"
                                 alt="Срочно" />
                        }
                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Ответственный: @i.responsible</p>
                        </div>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">
                                Ожидаемая дата: @i.expected_date.ToString("dd.MM.yyyy")
                            </p>
                        </div>
                    </div>
                }
            }
        </div>
        <div id="status-in-progress" class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;" ondrop="drop(event)" ondragover="allowDrop(event)">
            <div class="status-title">в работе</div>
            @{
                count = 0;
            }
            @foreach (var i in Model.subtasks)
            {
                if (i.status == "В работе" && (!Model.TaskId.HasValue || i.task == Model.TaskId.Value))
                {
                    count++;
                    <div id="subtask-@i.id"
                         style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;position:relative;"
                         data-project-name="@i.name" draggable="true" ondragstart="dragStart(event)"
                         onclick="handleSubtaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.responsible', '@i.task', '@i.expected_date.ToString("dd.MM.yyyy")')"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        @if (i.IsUrgent)
                        {
                            <img src="~/Images/fire.png"
                                 style="position: absolute; top: 8px; right: 12px; width: 40px; height: 40px;"
                                 alt="Срочно" />
                        }
                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Ответственный: @i.responsible</p>
                        </div>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">
                                Ожидаемая дата: @i.expected_date.ToString("dd.MM.yyyy")
                            </p>
                        </div>
                    </div>
                }
            }
        </div>
        <div id="status-testing" class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;" ondrop="drop(event)" ondragover="allowDrop(event)">
            <div class="status-title">можно проверять</div>
            @{
                count = 0;
            }
            @foreach (var i in Model.subtasks)
            {
                if (i.status == "Можно проверять" && (!Model.TaskId.HasValue || i.task == Model.TaskId.Value))
                {
                    count++;
                    <div id="subtask-@i.id"
                         style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;position:relative;"
                         data-project-name="@i.name" draggable="true" ondragstart="dragStart(event)"
                         onclick="handleSubtaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.responsible', '@i.task', '@i.expected_date.ToString("dd.MM.yyyy")')"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        @if (i.IsUrgent)
                        {
                            <img src="~/Images/fire.png"
                                 style="position: absolute; top: 8px; right: 12px; width: 40px; height: 40px;"
                                 alt="Срочно" />
                        }
                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Ответственный: @i.responsible</p>
                        </div>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">
                                Ожидаемая дата: @i.expected_date.ToString("dd.MM.yyyy")
                            </p>
                        </div>
                    </div>
                }
            }
        </div>
        <div id="status-done" class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;" ondrop="drop(event)" ondragover="allowDrop(event)">
            <div class="status-title">готово</div>
            @{
                count = 0;
            }
            @foreach (var i in Model.subtasks)
            {
                if (i.status == "Готово" && (!Model.TaskId.HasValue || i.task == Model.TaskId.Value))
                {
                    count++;
                    <div id="subtask-@i.id"
                         style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;position:relative;"
                         data-project-name="@i.name" draggable="true" ondragstart="dragStart(event)"
                         onclick="handleSubtaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.responsible', '@i.task', '@i.expected_date.ToString("dd.MM.yyyy")')"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        @if (i.IsUrgent)
                        {
                            <img src="~/Images/fire.png"
                                 style="position: absolute; top: 8px; right: 12px; width: 40px; height: 40px;"
                                 alt="Срочно" />
                        }
                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Ответственный: @i.responsible</p>
                        </div>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">
                                Ожидаемая дата: @i.expected_date.ToString("dd.MM.yyyy")
                            </p>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<div id="addSubtaskModalOverlay" class="modal-overlay" style="display: none;"></div>
<div id="addSubtaskModal" class="modal-content" style="display: none;">
    <span id="addSubtaskCloseModal" class="close">&times;</span>
    <p style="color: #ABABAB; font-size: 14px;" id="nameWindow">Добавление подзадачи</p>
    <p id="currUserEmail" style="display: none">@Model._userService.Email</p>
    <hr style="border: 0; height: 2px; background: #B5B5B5;">
    <form id="addSubTaskForm" method="post" asp-page-handler="CreateSubTask" enctype="multipart/form-data">
        <div style="">
            <div class="form-field">
                <p class="form-label">Наименование</p>
                <input class="form-control addProjInput"
                       name="Name"
                       id="nameInput"
                       placeholder="Введите название задачи" />
            </div>

            <div class="form-field">
                <p class="form-label">Описание</p>
                <textarea class="form-control addProjTextArea"
                          id="descriptionInput"
                          name="Description"></textarea>
            </div>
            <input type="hidden" id="subtaskId" name="EditingSubtaskId" />

            <input type="hidden" name="Task" id="addSubTaskId" value="@Model.TaskId"/>
            <input type="hidden" name="TaskId" value="@Model.TaskId" id="addSubTaskId" />
            <input type="hidden" name="TaskName" value="@Model.TaskName" id="addSubTaskName" />
            <div class="form-field">
                <p class="form-label">Ответственный</p>
                <select id="subtaskResponsibleSelect" name="Responsible" class="form-control">

                </select>
            </div>
            <div class="form-field">
                <p class="form-label">Ожидаемая дата</p>
                <input class="form-control"
                       type="date"
                       name="expected_date"
                       id="editSubtaskExpectedDate"
                       min="@DateTime.Now.ToString("yyyy-MM-dd")"
                       style="padding: 8px 12px;" />
            </div>
            <hr style="border: 0; height: 2px; background: #B5B5B5;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; align-items: center; gap: 16px;" id="RemoveAndArchiveButtons">
                    <a id="openModalConfirm"
                       style="color: #EB0000; text-decoration: none; font-size: 14px; cursor: pointer;">
                        Удалить
                    </a>

                </div>

                <div style="display: flex; align-items: center; gap: 8px;">
                    <button type="submit" class="button" id="createButton">Создать</button>
                </div>
            </div>
        </div>
    </form>
    <div id="searchResultsTask" style="margin-top: 16px;">
    </div>
</div>

<div id="modalConfirmOverlay" class="modal-overlay" style="display: none;"></div>

<div id="modalConfirm" class="modal-content" style="display: none;">
    <span id="closeModalConfirm" class="close">&times;</span>
    <h2 style="font-weight: 600; font-size: 18px;">Подтверждение удаления подзадачи</h2>
    <p style="font-size: 14px;">Вы уверены, что хотите удалить подзадачу? Это действие нельзя отменить.</p>
    <div style="display: flex; margin-top: 20px; justify-content: center; gap: 30px;">
        <button id="cancelDelete" style="background-color: #2954EC; border: none; padding: 10px 20px; border-radius: 14px; cursor: pointer;">Отмена</button>
        <form method="post">
            <input type="hidden" id="subtaskIdToDelete" name="subtaskId" />
            <button type="submit" asp-page-handler="DeleteSubtask" id="confirmDelete" style="background-color: white; color: #EB0000; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Удалить</button>
        </form>
    </div>
</div>

<script>
    const addSubtaskButton = document.getElementById('addSubTaskButton');
    const addSubtaskBtn = document.getElementById('addSubtaskBtn');
    const addSubtaskModalOverlay = document.getElementById('addSubtaskModalOverlay');
    const addSubtaskModal = document.getElementById('addSubtaskModal');
    const addSubtaskCloseModal = document.getElementById('addSubtaskCloseModal');
    const openModalConfirm = document.getElementById('openModalConfirm');
    const modalConfirm = document.getElementById('modalConfirm');
    const modalConfirmOverlay = document.getElementById('modalConfirmOverlay');
    const cancelDelete = document.getElementById('cancelDelete');
    const closeModalConfirm = document.getElementById('closeModalConfirm');
    const RemoveAndArchiveButtons = document.getElementById('RemoveAndArchiveButtons');
    const currUsersInTask = [];

    if (addSubtaskButton) {
        addSubtaskButton.addEventListener('click', () => {
            addSubtaskModalOverlay.style.display = 'block';
            addSubtaskModal.style.display = 'block';
            document.getElementById("nameWindow").innerText = "Добавление подзадачи";
            document.getElementById("createButton").innerText = "Добавить";
            document.getElementById("nameInput").value = "";
            document.getElementById("descriptionInput").value = "";
            RemoveAndArchiveButtons.style.visibility = "hidden";
            RemoveAndArchiveButtons.style.width = "0";
            loadUsersToSelect();
        });
    }

    if (addSubtaskCloseModal) {
        addSubtaskCloseModal.addEventListener('click', () => {
            addSubtaskModalOverlay.style.display = 'none';
            addSubtaskModal.style.display = 'none';
            document.getElementById("nameWindow").innerText = "Добавление подзадачи";
            document.getElementById("createButton").innerText = "Добавить";
            document.getElementById("nameInput").value = "";
            document.getElementById("descriptionInput").value = "";
            RemoveAndArchiveButtons.style.visibility = "hidden";
            RemoveAndArchiveButtons.style.width = "0";
        });
    }

    if (addSubtaskModalOverlay) {
        addSubtaskModalOverlay.addEventListener('click', (event) => {
            if (event.target === addSubtaskModalOverlay) {
                addSubtaskModalOverlay.style.display = 'none';
                addSubtaskModal.style.display = 'none';
            }
        });

    }

    if (openModalConfirm) {
        openModalConfirm.addEventListener('click', (event) => {
            if (event.target === openModalConfirm) {
                const subtaskId = document.getElementById("subtaskId").value;
                document.getElementById("subtaskIdToDelete").value = subtaskId;
                modalConfirm.style.display = 'block';
                modalConfirmOverlay.style.display = 'block';
            }
        });
    }

    if (cancelDelete) {
        cancelDelete.addEventListener('click', (event) => {
            if (event.target === cancelDelete) {
                modalConfirm.style.display = 'none';
                modalConfirmOverlay.style.display = 'none';
            }
        });
    }

    if (closeModalConfirm) {
        closeModalConfirm.addEventListener('click', () => {
            modalConfirmOverlay.style.display = 'none';
            modalConfirm.style.display = 'none';
        });
    }

    if (modalConfirmOverlay) {
        modalConfirmOverlay.addEventListener('click', (event) => {
            if (event.target === modalConfirmOverlay) {
                modalConfirmOverlay.style.display = 'none';
                modalConfirm.style.display = 'none';
            }
        });
    }

    function dragStart(event) {
        window.draggedTask = event.target;
        event.dataTransfer.effectAllowed = 'move';
        event.dataTransfer.setData('text/plain', event.target.id);
    }

    function allowDrop(event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'move';
    }

    function drop(event) {
        event.preventDefault();

        const statusColumnId = event.currentTarget.id;
        const newStatus = {
            "status-new": "Новая",
            "status-in-progress": "В работе",
            "status-testing": "Можно проверять",
            "status-done": "Готово"
        }[statusColumnId];

        if (!newStatus || !window.draggedTask) return;

        const subtaskId = window.draggedTask.id.replace("subtask-", "");

        window.draggedTask.remove();
        event.currentTarget.appendChild(window.draggedTask);
        window.draggedTask = null;

        updateSubtaskStatusOnServer(subtaskId, newStatus).finally(() => {
            updateSubtaskNumbers();
        });;
    }

    function updateSubtaskNumbers() {
        const columns = document.querySelectorAll('.status-column');

        columns.forEach(column => {
            let counter = 1;

            const tasks = column.querySelectorAll('div[id^="subtask-"]');

            tasks.forEach(taskDiv => {
                const numberP = taskDiv.querySelector('p');

                if (numberP && numberP.textContent.trim().startsWith('№')) {
                    numberP.textContent = `№ ${counter++}`;
                }
            });
        });
    }

    function loadUsersToSelect() {
        try {
            fetch('/Subtasks?handler=GetUsers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ taskId: document.getElementById("taskIdInput").value })
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        const data = result.data;

                        if (Array.isArray(data)) {
                            currUsersInTask.length = 0;
                            data.forEach(user => {
                                currUsersInTask.push({
                                    email: user.email,
                                    name: user.name,
                                    surname: user.surname
                                });
                            });
                            const select = document.getElementById('subtaskResponsibleSelect');
                            select.innerHTML = '';
                            currUsersInTask.forEach(user => {
                                const option = document.createElement('option');
                                option.value = user.email;
                                option.textContent = `${user.name} ${user.surname}`;
                                select.appendChild(option);
                            });
                        } else {
                            console.error('Ошибка: data не является массивом', data);
                        }
                    } else {
                        console.error('Ошибка на стороне сервера:', result.message);
                    }
                });
        } catch (error) {
            console.error(error);
            usersInProjectTask.innerHTML = '<p>Не удалось загрузить пользователей</p>';
        }
    }

    function handleSubtaskUpdateClick(id, name, description, status, responsible, task, expected_date) {

        addSubtaskModalOverlay.style.display = 'block';
        addSubtaskModal.style.display = 'block';

        document.getElementById("subtaskId").value = id;
        document.getElementById("nameInput").value = name;
        document.getElementById("descriptionInput").value = description;
        document.getElementById("nameWindow").innerText = "Подробности подзадачи";
        document.getElementById("createButton").innerText = "Изменить";
        RemoveAndArchiveButtons.style.visibility = "";
        RemoveAndArchiveButtons.style.width = "";
        if (expected_date) {
            const [day, month, year] = expected_date.split('.');
            const formattedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
            document.getElementById("editSubtaskExpectedDate").value = formattedDate;
        }
        loadUsersToSelect();
    }

    async function updateSubtaskStatusOnServer(subtaskId, newStatus) {
        try {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const response = await fetch('/Subtasks?handler=UpdateSubtaskStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ TaskId: parseInt(subtaskId), status: newStatus })
            });

            if (!response.ok) throw new Error('Не удалось обновить статус');

            console.log(`Задача ${subtaskId} переведена в статус "${newStatus}"`);
        } catch (err) {
            alert('Ошибка при обновлении статуса');
            console.error(err);
        }
    }

</script>