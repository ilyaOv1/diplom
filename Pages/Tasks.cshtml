@page
@using ProjManagmentSystem.Services
@model TasksModel
@{
	ViewData["Title"] = "Tasks";
    var isTaskPage = ViewContext.RouteData.Values["Page"]?.ToString() == "/Tasks";
    @inject UserService UserService
}

<div class="page-container" >
    <div class="header" style="margin-top: 80px;">
        <h1>Доска задач @Model.ProjectName</h1>
        @if (Model.IsPermissionToCreateAndEdit)
        {
            <form method="post">
                <button id="addTaskButton" type="button" class="button">Добавить задачу</button>
            </form>
        }
        <input hidden id="projectId" value="@Model.ProjectId"/>
    </div>
    <hr class="header-line">

    <div class="status-columns">
        <div id="status-new" class="status-column" style="background-color: #EBECF0; overflow-y: auto;" ondrop="drop(event)" ondragover="allowDrop(event)">
            <div class="status-title">новыe</div>
            @{
                int count = 0;
            }
            @foreach(var i in Model.tasks)
            {
                if (i.status == "Новая" && (!Model.ProjectId.HasValue || i.project == Model.ProjectId.Value))
                {
                    count++;
                    <div id="task-@i.id"
                         style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;position:relative;"
                         onclick="handleTaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.project', '@i.Access', '@i.expected_date.ToString("dd.MM.yyyy")')"
                         data-project-name="@i.name" draggable="true" ondragstart="dragStart(event)"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        @if (i.IsUrgent)
                        {
                            <img src="~/Images/fire.png"
                                 style="position: absolute; top: 8px; right: 12px; width: 40px; height: 40px;"
                                 alt="Срочно" />
                        }

                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Создатель: @i.creator</p>
                        </div>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">
                                Ожидаемая дата: @i.expected_date.ToString("dd.MM.yyyy")
                            </p>
                        </div>
                        <a style="color:#2954EC;text-decoration:none;font-size:13px;border-bottom:1px dashed #2954EC;"
                           onclick="handleTaskClick(event, '@i.name', '@i.id');">Подзадачи</a>
                    </div>
                }
            }
        </div>
        <div  id="status-in-progress" class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;" ondrop="drop(event)" ondragover="allowDrop(event)">
            <div  class="status-title">в работе</div>
            @{
                count = 0;
            }
            @foreach (var i in Model.tasks)
            {
                if (i.status == "В работе" && (!Model.ProjectId.HasValue || i.project == Model.ProjectId.Value))
                {
                    count++;
                    <div id="task-@i.id"
                         style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;position:relative;"
                         onclick="handleTaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.project', '@i.Access', '@i.expected_date.ToString("dd.MM.yyyy")')"
                         data-project-name="@i.name" draggable="true" ondragstart="dragStart(event)"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        @if (i.IsUrgent)
                        {
                            <img src="~/Images/fire.png"
                                 style="position: absolute; top: 8px; right: 12px; width: 40px; height: 40px;"
                                 alt="Срочно" />
                        }

                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Создатель: @i.creator</p>
                        </div>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">
                                Ожидаемая дата: @i.expected_date.ToString("dd.MM.yyyy")
                            </p>
                        </div>
                        <a style="color:#2954EC;text-decoration:none;font-size:13px;border-bottom:1px dashed #2954EC;"
                           onclick="handleTaskClick(event, '@i.name', '@i.id');">Подзадачи</a>
                    </div>
                }
            }
        </div>
        <div id="status-testing" class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;" ondrop="drop(event)" ondragover="allowDrop(event)">
            <div class="status-title">можно проверять</div>
            @{
                count = 0;
            }
            @foreach (var i in Model.tasks)
            {
                if (i.status == "Можно проверять" && (!Model.ProjectId.HasValue || i.project == Model.ProjectId.Value))
                {
                    count++;
                    <div id="task-@i.id"
                         style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;position:relative;"
                         onclick="handleTaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.project', '@i.Access', '@i.expected_date.ToString("dd.MM.yyyy")')"
                         data-project-name="@i.name" draggable="true" ondragstart="dragStart(event)"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        @if (i.IsUrgent)
                        {
                            <img src="~/Images/fire.png"
                                 style="position: absolute; top: 8px; right: 12px; width: 40px; height: 40px;"
                                 alt="Срочно" />
                        }

                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Создатель: @i.creator</p>
                        </div>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">
                                Ожидаемая дата: @i.expected_date.ToString("dd.MM.yyyy")
                            </p>
                        </div>
                        <a style="color:#2954EC;text-decoration:none;font-size:13px;border-bottom:1px dashed #2954EC;"
                           onclick="handleTaskClick(event, '@i.name', '@i.id');">Подзадачи</a>
                    </div>
                }
            }
        </div>
        <div id="status-done" class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;" ondrop="drop(event)" ondragover="allowDrop(event)">
            <div class="status-title">готово</div>
            @{
                count = 0;
            }
            @foreach (var i in Model.tasks)
            {
                if (i.status == "Готово" && (!Model.ProjectId.HasValue || i.project == Model.ProjectId.Value))
                {
                    count++;
                    <div id="task-@i.id"
                         style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;position:relative;"
                         onclick="handleTaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.project', '@i.Access', '@i.expected_date.ToString("dd.MM.yyyy")')"
                         data-project-name="@i.name" draggable="true" ondragstart="dragStart(event)"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        @if (i.IsUrgent)
                        {
                            <img src="~/Images/fire.png"
                                 style="position: absolute; top: 8px; right: 12px; width: 40px; height: 40px;"
                                 alt="Срочно" />
                        }

                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Создатель: @i.creator</p>
                        </div>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">
                                Ожидаемая дата: @i.expected_date.ToString("dd.MM.yyyy")
                            </p>
                        </div>
                        <a style="color:#2954EC;text-decoration:none;font-size:13px;border-bottom:1px dashed #2954EC;"
                           onclick="handleTaskClick(event, '@i.name', '@i.id');">Подзадачи</a>
                    </div>
                }
            }
        </div>
    </div>
</div>


@if (isTaskPage)
{
    <div id="addTaskModalOverlay" class="modal-overlay" style="display: none;"></div>
    <div id="addTaskModal" class="modal-content" style="display: none;">
        <span id="addTaskCloseModal" class="close">&times;</span>
        <p style="color: #ABABAB; font-size: 14px;" id="nameWindow">Создание новой задачи</p>
        <hr style="border: 0; height: 2px; background: #B5B5B5;">
        <form id="addTaskForm" method="post" asp-page-handler="CreateTask" enctype="multipart/form-data">
            <div>
                <h2 style="font-size: 18px; font-weight: 600; margin-bottom: 16px;">Данные задачи</h2>
                <input type="hidden" id="taskIdInput" name="EditingTaskId" value="" />
                <div class="form-field">
                    <p class="form-label">Наименование</p>
                    <input class="form-control"
                           name="Name"
                           id="editTaskName"
                           placeholder="Введите название задачи" />
                </div>
                <div class="form-field" style="display: none;">
                    <p class="form-label">Наименование</p>
                    <input class="form-control"
                           name="Status"

                           value="Новая"
                           placeholder="Введите название задачи" />
                </div>
                <input type="hidden" name="ProjectId" id="projId" value="@Model.ProjectId" />
                <input type="hidden" name="ProjectName" value="@Model.ProjectName" />
                <input id="currentUserEmail" hidden value="@UserService.Email" />
                <div class="form-field">
                    <p class="form-label">Описание</p>
                    <textarea class="form-control"
                              id="editTaskDescription"
                              name="Description"></textarea>
                </div>
                <div class="form-field">
                    <p class="form-label">Ожидаемая дата</p>
                    <input class="form-control"
                           type="date"
                           name="expected_date"
                           id="editTaskExpectedDate"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")"
                           style="padding: 8px 12px;" />
                </div>

                <h2 style="font-size: 18px; font-weight: 600; margin-bottom: 16px;">Ответственныe за задачу</h2>
                <p id="addParticipantTaskBtn" style="color: #D9D9D9; font-size: 13px; margin-bottom: 8px; cursor: pointer;">+ Добавить участника</p>
                <div style="margin-bottom: 8px;" id="usersInProjectTask">
                </div>
                <h2 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; ">Подзадачи</h2>
                <p id="addSubtaskBtn" style="color: #D9D9D9; font-size: 13px; margin-bottom: 8px; cursor: pointer;">+ Добавить подзадачу</p>
                <div style="margin-bottom: 8px;" id="listOfSubtasks">
                </div>
            </div>
            <hr style="border: 0; height: 2px; background: #B5B5B5;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; align-items: center; gap: 16px;" id="RemoveAndArchiveButtons">
                    <a
                       id="openModalConfirm"
                       style="color: #EB0000; text-decoration: none; font-size: 14px; cursor: pointer;">
                        Удалить
                    </a>

                    <div style="display: flex; align-items: center; gap: 8px;">
                        <button type="button" class="button" id="inArchive">В архив</button>
                    </div>
                </div>

                <div style="display: flex; align-items: center; gap: 8px;">
                    <button type="button" class="button" id="editButton">Создать</button>
                </div>
            </div>

        </form>
    </div>


    <div id="addParticipantTaskModalOverlay" class="modal-overlay" style="display: none;"></div>
    <div id="addParticipantTaskModal" class="modal-content" style="display: none; width: 700px">
        <span id="addParticipantTaskCloseModal" class="close">&times;</span>
        <p style="color: #ABABAB; font-size: 14px;">Добавление участника</p>
        
        <hr style="border: 0; height: 2px; background: #B5B5B5;">
        <div id="searchResultsTask" style="margin-top: 16px;">
        </div>
    </div>

    <div id="addSubtaskModalOverlay" class="modal-overlay" style="display: none;"></div>
    <div id="addSubtaskModal" class="modal-content" style="display: none; width: 700px">
        <span id="addSubtaskCloseModal" class="close">&times;</span>
        <p style="color: #ABABAB; font-size: 14px;">Добавление подзадачи</p>
        <hr style="border: 0; height: 2px; background: #B5B5B5;">
        <form id="addSubTaskForm" method="post" asp-page-handler="CreateSubTask" enctype="multipart/form-data">
            <div style="">
                <div class="form-field">
                    <p class="form-label">Наименование</p>
                    <input class="form-control addProjInput"
                           name="Name"
                           placeholder="Введите название задачи" />
                </div>

                <div class="form-field">
                    <p class="form-label">Описание</p>
                    <textarea class="form-control addProjTextArea"
                              name="Description"></textarea>
                </div>
                <input type="hidden" name="Task" id="addSubTaskId" />
                <div class="form-field">
                    <p class="form-label">Ответственный</p>
                    <select id="subtaskResponsibleSelect" name="Responsible" class="form-control">

                        <option></option>
                    </select>
                </div>
                <div class="form-field">
                    <p class="form-label">Ожидаемая дата</p>
                    <input class="form-control"
                           type="date"
                           name="expected_date"
                           id="editSubtaskExpectedDate"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")"
                           style="padding: 8px 12px;" />
                </div>
                <hr style="border: 0; height: 2px; background: #B5B5B5;">
                <div style="display: flex;">
                    <div style="display: flex; align-items: center; gap: 8px; margin-left: auto;">
                        <button type="submit" class="button">Создать</button>
                    </div>
                </div>
            </div>
        </form>
        <div id="searchResultsTask" style="margin-top: 16px;">
        </div>
    </div>



    <div id="participantsTaskList"></div>


    <div id="modalConfirmOverlay" class="modal-overlay" style="display: none;"></div>

    <div id="modalConfirm" class="modal-content" style="display: none;">
        <span id="closeModalConfirm" class="close">&times;</span>
        <h2 style="font-weight: 600; font-size: 18px;">Подтверждение удаления задачи</h2>
        <p style="font-size: 14px;">Вы уверены, что хотите удалить задачу? Это действие нельзя отменить.</p>
        <div style="display: flex; margin-top: 20px; justify-content: center; gap: 30px;">
            <button id="cancelDelete" style="background-color: #2954EC; border: none; padding: 10px 20px; border-radius: 14px; cursor: pointer;">Отмена</button>
            <form method="post">
                <input type="hidden" id="taskIdToDelete" name="taskId" />
                <button type="submit" asp-page-handler="DeleteTask" id="confirmDelete" style="background-color: white; color: #EB0000; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Удалить</button>
            </form>
        </div>
    </div>
}
<script>
    const addTaskButton = document.getElementById('addTaskButton');
    const addTaskModalOverlay = document.getElementById('addTaskModalOverlay');
    const addTaskModal = document.getElementById('addTaskModal');
    const addTaskCloseModal = document.getElementById('addTaskCloseModal');
    const addParticipantTaskBtn = document.getElementById('addParticipantTaskBtn');
    const addParticipantTaskModalOverlay = document.getElementById('addParticipantTaskModalOverlay');
    const addParticipantTaskModal = document.getElementById('addParticipantTaskModal');
    const addParticipantTaskCloseModal = document.getElementById('addParticipantTaskCloseModal');
    const addSubtaskBtn = document.getElementById('addSubtaskBtn');
    const addSubtaskModalOverlay = document.getElementById('addSubtaskModalOverlay');
    const addSubtaskModal = document.getElementById('addSubtaskModal');
    const addSubtaskCloseModal = document.getElementById('addSubtaskCloseModal');
    const searchResultsTask = document.getElementById('searchResultsTask');
    const openModalConfirm = document.getElementById('openModalConfirm');
    const modalConfirm = document.getElementById('modalConfirm');
    const modalConfirmOverlay = document.getElementById('modalConfirmOverlay');
    const cancelDelete = document.getElementById('cancelDelete');
    const closeModalConfirm = document.getElementById('closeModalConfirm');
    const RemoveAndArchiveButtons = document.getElementById('RemoveAndArchiveButtons');
    const selectedTaskUsers = [];
    const subtasksList = [];
    const currUsersInTask = [];
    let draggedTask = null;

    if (addTaskButton) {
        addTaskButton.addEventListener('click', () => {
            selectedTaskUsers.length = 0;
            addTaskModalOverlay.style.display = 'block';
            addTaskModal.style.display = 'block';
            document.getElementById("editButton").innerText = "Создать";
            document.getElementById("taskIdInput").value = "";
            document.getElementById("nameWindow").innerText = "Создание задачи";
            document.getElementById("editTaskName").value = "";
            document.getElementById("editTaskDescription").value = "";
            document.getElementById("usersInProjectTask").innerHTML = '';
            document.getElementById("listOfSubtasks").innerHTML = '';
            document.getElementById("editTaskName").readOnly = false;
            document.getElementById("editTaskDescription").readOnly = false;
            document.getElementById("editButton").style.display = "";
            RemoveAndArchiveButtons.style.visibility = "hidden";
            RemoveAndArchiveButtons.style.width = "0";
            addSubtaskBtn.style.display = "";
            addParticipantTaskBtn.style.display = "";
        });
    }

    if (addTaskCloseModal) {
        addTaskCloseModal.addEventListener('click', () => {
            addTaskModalOverlay.style.display = 'none';
            addTaskModal.style.display = 'none';
        });
    }

    if (addTaskModalOverlay) {
        addTaskModalOverlay.addEventListener('click', (event) => {
            if (event.target === addTaskModalOverlay) {
                addTaskModalOverlay.style.display = 'none';
                addTaskModal.style.display = 'none';
            }
        });
    }
    
    if (addParticipantTaskBtn) {
        addParticipantTaskBtn.addEventListener('click', () => {
            addParticipantTaskModalOverlay.style.display = 'block';
            addParticipantTaskModal.style.display = 'block';
            LoadUsersByProject();
        });
    }

    if (addParticipantTaskCloseModal) {
        addParticipantTaskCloseModal.addEventListener('click', () => {
            addParticipantTaskModalOverlay.style.display = 'none';
            addParticipantTaskModal.style.display = 'none';
            document.getElementById("searchResultsTask").innerHTML = "";
        });
    }

    if (addParticipantTaskModalOverlay) {
        addParticipantTaskModalOverlay.addEventListener('click', (event) => {
            if (event.target === addParticipantTaskModalOverlay) {
                addParticipantTaskModalOverlay.style.display = 'none';
                addParticipantTaskModal.style.display = 'none';
                document.getElementById("searchResultsTask").innerHTML = "";
            }
        });

    }

    if (addSubtaskBtn) {
        addSubtaskBtn.addEventListener('click', () => {
            populateSubtaskUserSelect();
            addSubtaskModalOverlay.style.display = 'block';
            addSubtaskModal.style.display = 'block';
        });
    }

    if (addSubtaskCloseModal) {
        addSubtaskCloseModal.addEventListener('click', () => {
            addSubtaskModalOverlay.style.display = 'none';
            addSubtaskModal.style.display = 'none';
        });
    }

    if (addSubtaskModalOverlay) {
        addSubtaskModalOverlay.addEventListener('click', (event) => {
            if (event.target === addSubtaskModalOverlay) {
                addSubtaskModalOverlay.style.display = 'none';
                addSubtaskModal.style.display = 'none';
            }
        });

    }

    if (openModalConfirm) {
        openModalConfirm.addEventListener('click', (event) => {
            if (event.target === openModalConfirm) {
                const taskId = document.getElementById("taskIdInput").value;
                document.getElementById("taskIdToDelete").value = taskId;
                modalConfirm.style.display = 'block';
                modalConfirmOverlay.style.display = 'block';
            }
        });
    }

    if (cancelDelete) {
        cancelDelete.addEventListener('click', (event) => {
            if (event.target === cancelDelete) {
                modalConfirm.style.display = 'none';
                modalConfirmOverlay.style.display = 'none';
            }
        });
    }

    if (closeModalConfirm) {
        closeModalConfirm.addEventListener('click', () => {
            modalConfirmOverlay.style.display = 'none';
            modalConfirm.style.display = 'none';
        });
    }

    if (modalConfirmOverlay) {
        modalConfirmOverlay.addEventListener('click', (event) => {
            if (event.target === modalConfirmOverlay) {
                modalConfirmOverlay.style.display = 'none';
                modalConfirm.style.display = 'none';
            }
        });
    }

    document.getElementById("editButton").addEventListener("click", async function (e) {
        e.preventDefault();

        const form = document.getElementById("addTaskForm");
        const formData = new FormData(form);
        formData.append("SelectedUsersToTask", JSON.stringify(selectedTaskUsers));
        try {
            const response = await fetch(form.action, {
                method: "POST",
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: formData
            });

            if (response.ok) {
                window.location.reload();
            } else {
                alert("Ошибка при создании проекта");
            }
        } catch (error) {
            console.error("Ошибка:", error);
            alert("Произошла сетевая ошибка");
        }
    });

    function LoadUsersByProject(){
        const projectId = document.getElementById('projId').value;
        if (!projectId) {
            console.error('ID проекта не найден');
            searchResultsTask.innerHTML = '<p>Ошибка: ID проекта не указан</p>';
            return;
        }
        const token = getCookie('token');
        if (!token) {
            console.error('Токен не найден в cookies');
            searchResultsTask.innerHTML = '<p>Ошибка авторизации</p>';
            return;
        }

        fetch(`https://localhost:7136/api/auth/search-project?project=${encodeURIComponent(projectId)}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            credentials: 'include'
        })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 401) {
                        throw new Error('Не авторизован');
                    }
                    throw new Error('Ошибка сети');
                }
                return response.json();
            })
            .then(data => {
                searchResultsTask.innerHTML = '';
                if (data.length === 0) {
                    searchResultsTask.innerHTML = '<p>Пользователь не найден</p>';
                    return;
                }

                data.forEach(user => {
                    if (selectedTaskUsers.some(participant => participant.Email === user.email)) {
                        return;
                    }
                    const userDiv = document.createElement('div');
                    userDiv.style.display = 'flex';
                    userDiv.style.justifyContent = 'space-between';
                    userDiv.style.alignItems = 'center';
                    userDiv.style.padding = '8px';
                    userDiv.style.paddingRight = '0px';
                    userDiv.style.borderBottom = '1px solid #D2D2D2';


                    userDiv.innerHTML = `
                            <div style="display: flex; align-items: center;">
                                <img src="/Images/big-ico.png" style="width: 20px; height: 20px; margin-right: 10px;" />
                                <p style="font-size: 13px; color: #232323;">${user.name} </p>
                                <p style="font-size: 13px; color: #232323;">${user.surname} </p>
                            </div>
                            <button class="button" style="width: 100px;" onclick="addUser('${user.email}', '${user.name} ${user.surname}')">Добавить</button>
                        `;
                    searchResultsTask.appendChild(userDiv);
                });
            })
            .catch(error => {
                console.error('Ошибка при поиске пользователя:', error);
                searchResultsTask.innerHTML = `<p>${error.message}</p>`;
            });
    }

   

    document.getElementById('addSubTaskForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(this);

        try {
            const response = await fetch(this.action, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: formData
            });

            const result = await response.json();


            if (result.success) {
                document.getElementById('addSubtaskModal').style.display = 'none';
                document.getElementById('addSubtaskModalOverlay').style.display = 'none';

                this.reset();
            } else {
                alert('Ошибка: ' + (result.message || 'Не удалось создать подзадачу'));
            }
        } catch (error) {
            console.error('Ошибка:', error);
            alert('Произошла ошибка при отправке формы.');
        }
    });

    function dragStart(event) {
        window.draggedTask = event.target;
        event.dataTransfer.effectAllowed = 'move';
        event.dataTransfer.setData('text/plain', event.target.id);
    }

    function allowDrop(event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'move';
    }

    function drop(event) {
        event.preventDefault();

        const statusColumnId = event.currentTarget.id;
        const newStatus = {
            "status-new": "Новая",
            "status-in-progress": "В работе",
            "status-testing": "Можно проверять",
            "status-done": "Готово"
        }[statusColumnId];

        if (!newStatus || !window.draggedTask) return;

        const taskId = window.draggedTask.id.replace("task-", "");

        window.draggedTask.remove();
        event.currentTarget.appendChild(window.draggedTask); 
        window.draggedTask = null; 

        updateTaskStatusOnServer(taskId, newStatus).finally(() => {
            updateTaskNumbers();
        });;
    }

    function updateTaskNumbers() {
        const columns = document.querySelectorAll('.status-column');

        columns.forEach(column => {
            let counter = 1;

            const tasks = column.querySelectorAll('div[id^="task-"]');

            tasks.forEach(taskDiv => {
                const numberP = taskDiv.querySelector('p');

                if (numberP && numberP.textContent.trim().startsWith('№')) {
                    numberP.textContent = `№ ${counter++}`;
                }
            });
        });
    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    function addUser(email, name, isResponsible, canEdit) {
        if (selectedTaskUsers.some(participant => participant.Email === email)) {
            alert('Участник уже добавлен');
            return;
        }

        const participant = { Email: email, Name: name, IsResponsible: isResponsible };
        selectedTaskUsers.push(participant);
        sendArrayToServer();
        addParticipantTaskModal.style.display = 'none';
        addParticipantTaskModalOverlay.style.display = 'none';

        const searchResults = document.getElementById('searchResultsTask');
        searchResults.innerHTML = '';

        const usersInProjectTask = document.getElementById('usersInProjectTask');
        updateUI(canEdit);
    }

    function addSubtask(name, responsible) {

        const subtask = { name, responsible };
        subtasksList.push(subtask);
    }

    function populateSubtaskUserSelect() {
        const select = document.getElementById('subtaskResponsibleSelect');
        select.innerHTML = '';
        if (currUsersInTask.length === 0) {
            const option = document.createElement('option');
            option.value = '';
            option.textContent = 'Нет пользователей';
            option.disabled = true;
            option.selected = true;
            select.appendChild(option);
        } else {
            currUsersInTask.forEach(user => {
                const option = document.createElement('option');
                option.value = user.email;
                option.textContent = `${user.name} ${user.surname}`;
                select.appendChild(option);
            });
        }
    }

    function toggleResponsibility(email, canEdit) {
        const user = selectedTaskUsers.find(u => u.Email === email);
        const currentUserEmail = document.getElementById("currentUserEmail")?.value;
        if (email === currentUserEmail) {

            return;
        }
        if (!user) return;

        user.IsResponsible = !user.IsResponsible;

        updateUI(canEdit);

        sendArrayToServer();
    }

    function updateUI(canEdit) {
        const usersInProjectTask = document.getElementById('usersInProjectTask');
        const listOfSubtasks = document.getElementById('listOfSubtasks');
        usersInProjectTask.innerHTML = '';
        listOfSubtasks.innerHTML = '';
        let count = 0;
        const maxToShow = 3;
        selectedTaskUsers.forEach(u => {
            if (count >= maxToShow) return;

            if (selectedTaskUsers.length <= 1){
                console.log(u.Email);
                const element = createUserElement(u.Email, u.Name, u.IsResponsible, false);
                usersInProjectTask.appendChild(element);
            }else{
                console.log(u.Email);
                const element = createUserElement(u.Email, u.Name, u.IsResponsible, canEdit);
                usersInProjectTask.appendChild(element);
            }
            count++;
        });

        count = 0;
        subtasksList.forEach(s => {
            if (count >= maxToShow) return;
            const element = createSubtaskElement(s.name, s.responsible);
            listOfSubtasks.appendChild(element);
            count++;
        })

    }

    function createUserElement(email, name, isResponsible = false, canEdit = false) {
        const userDiv = document.createElement('div');
        const currUser = document.getElementById("currentUserEmail");
        userDiv.style.border = '1px solid #D2D2D2';
        userDiv.style.borderRadius = '8px';
        userDiv.style.background = '#FCFCFC';
        userDiv.style.display = 'flex';
        userDiv.style.padding = '9px 16px';
        userDiv.style.justifyContent = 'space-between';
        userDiv.style.alignItems = 'center';
        userDiv.style.marginBottom = '5px';
        userDiv.setAttribute('data-email', email);

        const starImg = document.createElement('img');
        starImg.src = isResponsible ? '/Images/blue_star.png' : '/Images/star.png';
        starImg.style.width = '18px';
        starImg.style.height = '16px';
        starImg.style.cursor = canEdit ? 'pointer' : 'auto';

        if (canEdit && (currUser.value != email)) {
            starImg.addEventListener('click', () => toggleResponsibility(email, canEdit));
        }

        const removeImg = document.createElement('img');
        removeImg.src = '/Images/remove.png';
        removeImg.style.width = '14px';
        removeImg.style.height = '14px';
        removeImg.style.cursor = canEdit ? 'pointer' : 'auto';
        if (canEdit && (currUser.value != email)) {
            removeImg.addEventListener('click', () => removeUser(email));
        }
        

        const rightContainer = document.createElement('div');
        rightContainer.style.display = 'flex';
        rightContainer.style.gap = '10px';
        rightContainer.style.alignItems = 'center';
        rightContainer.appendChild(starImg);
        rightContainer.appendChild(removeImg);

        const leftContainer = document.createElement('div');
        leftContainer.style.display = 'flex';
        leftContainer.style.alignItems = 'center';
        leftContainer.innerHTML = `
            <img src="/Images/big-ico.png" style="width: 20px; height: 20px; margin-right: 10px;" />
            <p style="font-size: 13px; color: #232323;">${name}</p>
        `;

        userDiv.appendChild(leftContainer);
        userDiv.appendChild(rightContainer);

        return userDiv;
    }

    function createSubtaskElement(title, responsibleUser = 'Не назначен', canEdit = false) {
        const subtaskDiv = document.createElement('div');
        subtaskDiv.style.border = '1px solid #D2D2D2';
        subtaskDiv.style.borderRadius = '8px';
        subtaskDiv.style.background = '#FCFCFC';
        subtaskDiv.style.display = 'flex';
        subtaskDiv.style.alignItems = 'center';
        subtaskDiv.style.padding = '9px 16px';
        subtaskDiv.style.marginBottom = '5px';
        subtaskDiv.style.position = 'relative';

        const leftContainer = document.createElement('div');
        leftContainer.style.display = 'flex';
        leftContainer.style.alignItems = 'center';
        leftContainer.style.gap = '10px';
        leftContainer.style.paddingRight = '20px'; 
        leftContainer.style.flex = '1'; 

        const taskText = document.createElement('p');
        taskText.textContent = title;
        taskText.style.fontSize = '13px';
        taskText.style.color = '#232323';
        taskText.style.margin = '0';

        leftContainer.appendChild(taskText);

        const line = document.createElement('div');
        line.style.width = '1px';
        line.style.height = '24px';
        line.style.backgroundColor = '#C0C0C0';
        line.style.position = 'absolute';
        line.style.left = '50%';
        line.style.transform = 'translateX(-50%)';

        const rightContainer = document.createElement('div');
        rightContainer.style.display = 'flex';
        rightContainer.style.alignItems = 'center';
        rightContainer.style.gap = '10px';
        rightContainer.style.paddingLeft = '20px';
        rightContainer.style.flex = '1'; 
        rightContainer.style.justifyContent = 'flex-end';

        const userDisplay = document.createElement('p');
        userDisplay.textContent = responsibleUser;
        userDisplay.style.fontSize = '13px';
        userDisplay.style.color = '#232323';
        userDisplay.style.margin = '0';

        rightContainer.appendChild(userDisplay);

        subtaskDiv.appendChild(leftContainer);
        subtaskDiv.appendChild(line);
        subtaskDiv.appendChild(rightContainer);

        return subtaskDiv;
    }

    function removeUser(email) {
        const index = selectedTaskUsers.findIndex(participant => participant.Email === email);
        const currentUserEmail = document.getElementById("currentUserEmail")?.value;
        if (email === currentUserEmail) {

            return;
        }
        if (index !== -1) {
            selectedTaskUsers.splice(index, 1);
        }

        const usersInProjectTask = document.getElementById('usersInProjectTask');
        const userElement = usersInProjectTask.querySelector(`div[data-email="${email}"]`);
        if (userElement) {
            userElement.remove();
        }
        sendArrayToServer();
    }

    async function handleTaskUpdateClick(id, name, description, status, projectId, access, expected_date) {
        const usersInProjectTask = document.getElementById('usersInProjectTask');
        const listOfSubtasks = document.getElementById('listOfSubtasks');
        const canEdit = access === "True" || access === true || access === "1";
        const isHide = status == "Готово";
        selectedTaskUsers.length = 0;
        subtasksList.length = 0;
        addTaskModalOverlay.style.display = 'block';
        addTaskModal.style.display = 'block';

        document.getElementById("editTaskName").value = name;
        document.getElementById("editTaskDescription").value = description;
        document.getElementById("projId").value = projectId;
        document.getElementById("taskIdInput").value = id;
        document.getElementById("nameWindow").innerText = "Изменение задачи";
        document.getElementById("editButton").innerText = "Изменить";
        document.getElementById("addSubTaskId").value = id;
        RemoveAndArchiveButtons.style.visibility = "";
        RemoveAndArchiveButtons.style.width = "";
        if (expected_date) {
            const [day, month, year] = expected_date.split('.');
            const formattedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
            document.getElementById("editTaskExpectedDate").value = formattedDate;
        }
        usersInProjectTask.innerHTML = '';
        loadUsersForProject(id, canEdit);
        listOfSubtasks.innerHTML = '';
        await loadSubTasks(id);

        updateUI(canEdit);
        if (canEdit){
            document.getElementById("editTaskName").readOnly = false;
            document.getElementById("editTaskDescription").readOnly = false;
            document.getElementById("editButton").style.display = "";
            addSubtaskBtn.style.display = "";
            addParticipantTaskBtn.style.display = "";
        }
        else {
            document.getElementById("editTaskName").readOnly = true;
            document.getElementById("editTaskDescription").readOnly = true;
            document.getElementById("editButton").style.display = "none";
            addSubtaskBtn.style.display = "none";
            addParticipantTaskBtn.style.display = "none";
        }

        try{
            fetch('/Tasks?handler=GetUsers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ taskId: id })
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        const data = result.data;

                        if (Array.isArray(data)) {
                            currUsersInTask.length = 0;
                            data.forEach(user => {
                                currUsersInTask.push({
                                    email: user.email,
                                    name: user.name,
                                    surname: user.surname
                                });
                            });
                        } else {
                            console.error('Ошибка: data не является массивом', data);
                        }
                    } else {
                        console.error('Ошибка на стороне сервера:', result.message);
                    }
                });
        } catch (error) {
            console.error(error);
            usersInProjectTask.innerHTML = '<p>Не удалось загрузить пользователей</p>';
        }
    }

    function handleTaskClick(event, taskName, taskId) {
        event.stopPropagation();
        const url = `/Subtasks?taskName=${encodeURIComponent(taskName)}&taskId=${encodeURIComponent(taskId)}`;
        window.location.href = url;
    }


    async function loadUsersForProject(taskId, canEdit) {
        const usersInProject = document.getElementById('usersInProjectTask');
        usersInProject.innerHTML = '<p>Загрузка пользователей...</p>';

        try {
            const response = await fetch(`/Tasks?handler=LoadTaskUsers&taskId=${taskId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ taskId })
            });

            if (!response.ok) throw new Error("Ошибка сети");

            const result = await response.json();

            if (!result.success) {
                usersInProject.innerHTML = `<p>${result.message}</p>`;

                return;
            }

            usersInProjectTask.innerHTML = '';

            result.users.forEach(user => {
                addUser(user.email, user.name + ' ' + user.surname, user.isResponsible, canEdit)
            });

        } catch (error) {
            console.error(error);
            usersInProjectTask.innerHTML = '<p>Не удалось загрузить пользователей</p>';
        }
    }

    async function loadSubTasks(taskId) {
        const listOfSubtasks = document.getElementById('listOfSubtasks');
        listOfSubtasks.innerHTML = '<p>Загрузка подзадач...</p>';

        try {
            const response = await fetch(`/Tasks?handler=LoadSubTask&taskId=${taskId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ taskId })
            });

            if (!response.ok) throw new Error("Ошибка сети");

            const result = await response.json();

            if (!result.success) {
                listOfSubtasks.innerHTML = `<p>${result.message}</p>`;

                return;
            }

            listOfSubtasks.innerHTML = '';
            result.subtasks.forEach(subtask1 => {
                addSubtask(subtask1.name, subtask1.responsible);
            });

        } catch (error) {
            console.error(error);
            usersInProjectTask.innerHTML = '<p>Не удалось загрузить пользователей</p>';
        }
    }

    async function sendArrayToServer() {
        const response = await fetch('?handler=ProcessArray', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(selectedTaskUsers)
        });

    }

    async function updateTaskStatusOnServer(taskId, newStatus) {
        try {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const response = await fetch('/Tasks?handler=UpdateTaskStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ taskId: parseInt(taskId), status: newStatus })
            });

            if (!response.ok) throw new Error('Не удалось обновить статус');

        } catch (err) {
            alert('Ошибка при обновлении статуса');
            console.error(err);
        }
    }

    
</script>


