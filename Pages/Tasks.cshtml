@page
@model TasksModel
@{
	ViewData["Title"] = "Tasks";
    var isTaskPage = ViewContext.RouteData.Values["Page"]?.ToString() == "/Tasks";
}

<div class="page-container" >
    <div class="header" style="margin-top: 80px;">
        <h1>Доска задач @Model.ProjectName</h1>
        
        <form method="post">
            <button id="addTaskButton" type="button" class="button">Добавить задачу</button>
        </form>
    </div>
    <hr class="header-line">

    <div class="status-columns">
        <div class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;">
            <div class="status-title">новыe</div>
            @{
                int count = 0;
            }
            @foreach(var i in Model.tasks)
            {
                if (i.status == "Новая" && (!Model.ProjectId.HasValue || i.project == Model.ProjectId.Value))
                {
                    count++;
                    <div style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;"
                         onclick="handleTaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.project', '@i.Access')"
                         data-project-name="@i.name"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <p style="font-size:14px;color:#666;margin:0 0 12px 0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">@i.description</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Ответственный:</p>
                        </div>
                        <a href="#" style="color:#2954EC;text-decoration:none;font-size:13px;border-bottom:1px dashed #2954EC;" onclick="event.stopPropagation(); showSubtasks('@i.id')">Подзадачи</a>
                    </div>
                }
            }
        </div>
        <div class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;">
            <div class="status-title">в работе</div>
            @{
                count = 0;
            }
            @foreach (var i in Model.tasks)
            {
                if (i.status == "В процессе" && (!Model.ProjectId.HasValue || i.project == Model.ProjectId.Value))
                {
                    count++;
                    <div style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;"
                         onclick="handleTaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.project')"
                         data-project-name="@i.name"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <p style="font-size:14px;color:#666;margin:0 0 12px 0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">@i.description</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Ответственный:</p>
                        </div>
                        <a href="#" style="color:#2954EC;text-decoration:none;font-size:13px;border-bottom:1px dashed #2954EC;" onclick="event.stopPropagation(); showSubtasks('@i.id')">Подзадачи</a>
                    </div>
                }
            }
        </div>
        <div class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;">
            <div class="status-title">можно проверять</div>
            @{
                count = 0;
            }
            @foreach (var i in Model.tasks)
            {
                if (i.status == "Можно проверять" && (!Model.ProjectId.HasValue || i.project == Model.ProjectId.Value))
                {
                    count++;
                    <div style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;"
                         onclick="handleTaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.project')"
                         data-project-name="@i.name"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <p style="font-size:14px;color:#666;margin:0 0 12px 0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">@i.description</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Ответственный:</p>
                        </div>
                        <a href="#" style="color:#2954EC;text-decoration:none;font-size:13px;border-bottom:1px dashed #2954EC;" onclick="event.stopPropagation(); showSubtasks('@i.id')">Подзадачи</a>
                    </div>
                }
            }
        </div>
        <div class="status-column" style="background-color: #EBECF0; overflow-y: auto; padding-bottom: 200px;">
            <div class="status-title">готово</div>
            @{
                count = 0;
            }
            @foreach (var i in Model.tasks)
            {
                if (i.status == "Готово" && (!Model.ProjectId.HasValue || i.project == Model.ProjectId.Value))
                {
                    count++;
                    <div style="background:#FFFFFF;border-radius:8px;width:100%;margin-right:9px;margin-top:10px;box-shadow:0 2px 6px rgba(0,0,0,0.05);padding:16px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;border:1px solid #E0E0E0;"
                         onclick="handleTaskUpdateClick('@i.id','@i.name','@i.description','@i.status','@i.project')"
                         data-project-name="@i.name"
                         onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                         onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                        <p style="color:#A0A0A0;font-size:12px;margin:0 0 8px 0;">№ @count</p>
                        <p style="font-size:18px;color:#333;font-weight:600;margin:0 0 12px 0;">@i.name</p>
                        <p style="font-size:14px;color:#666;margin:0 0 12px 0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">@i.description</p>
                        <div style="display:flex;align-items:center;margin-bottom:12px;">
                            <p style="font-size:14px;color:#333;margin:0;">Ответственный:</p>
                        </div>
                        <a href="#" style="color:#2954EC;text-decoration:none;font-size:13px;border-bottom:1px dashed #2954EC;" onclick="event.stopPropagation(); showSubtasks('@i.id')">Подзадачи</a>
                    </div>
                }
            }
        </div>
    </div>
</div>


@if (isTaskPage)
{
    <div id="addTaskModalOverlay" class="modal-overlay" style="display: none;"></div>
    <div id="addTaskModal" class="modal-content" style="display: none;">
        <p style="display: none;" id="projId">@Model.ProjectId</p>
        <span id="addTaskCloseModal" class="close">&times;</span>
        <p style="color: #ABABAB; font-size: 14px;" id="nameWindow">Создание новой задачи</p>
        <hr style="border: 0; height: 2px; background: #B5B5B5;">
        <form id="addTaskForm" method="post" asp-page-handler="CreateTask" enctype="multipart/form-data">
            <div>
                <h2 style="font-size: 18px; font-weight: 600; margin-bottom: 16px;">Данные задачи</h2>
                <input type="hidden" id="taskIdInput" name="EditingTaskId" value="" />
                <div class="form-field">
                    <p class="form-label">Наименование</p>
                    <input class="form-control"
                           name="Name"
                           id="editTaskName"
                           placeholder="Введите название задачи" />
                </div>
                <div class="form-field" style="display: none;">
                    <p class="form-label">Наименование</p>
                    <input class="form-control"
                           name="Status"

                           value="Новая"
                           placeholder="Введите название задачи" />
                </div>
                <input type="hidden" name="ProjectId" id="projId" value="@Model.ProjectId" />
                <input type="hidden" name="ProjectName" value="@Model.ProjectName" />
                <div class="form-field">
                    <p class="form-label">Описание</p>
                    <textarea class="form-control"
                              id="editTaskDescription"
                              name="Description"></textarea>
                </div>

                <h2 style="font-size: 18px; font-weight: 600; margin-bottom: 16px;">Ответственный за задачу</h2>
                <p id="addParticipantTaskBtn" style="color: #D9D9D9; font-size: 13px; margin-bottom: 8px; cursor: pointer;">+ Добавить участника</p>
                <div style="margin-bottom: 8px;" id="usersInProjectTask">
                </div>
                <h2 style="font-size: 18px; font-weight: 600; margin-bottom: 16px; ">Подзадачи</h2>
                <p id="addSubtaskBtn" style="color: #D9D9D9; font-size: 13px; margin-bottom: 8px; cursor: pointer;">+ Добавить подзадачу</p>
            </div>
            <hr style="border: 0; height: 2px; background: #B5B5B5;">
            <div style="display: flex;">
                <div style="display: flex; align-items: center; gap: 8px; margin-left: auto;">
                    <button type="submit" class="button" id="editButton">Создать</button>
                </div>
            </div>

        </form>
    </div>


    <div id="addParticipantTaskModalOverlay" class="modal-overlay" style="display: none;"></div>
    <div id="addParticipantTaskModal" class="modal-content" style="display: none;">
        <span id="addParticipantTaskCloseModal" class="close">&times;</span>
        <p style="color: #ABABAB; font-size: 14px;">Добавление участника</p>
        <p id="currUserEmail" style="display: none">@Model._userService.email</p>
        <hr style="border: 0; height: 2px; background: #B5B5B5;">
        <div style="display: flex; align-content: center; align-items: center; justify-content:center;">
            <input id="participantTaskSearchInput" class="form-control" placeholder="Введите почту пользователя" />

        </div>
        <div id="searchResultsTask" style="margin-top: 16px;">
        </div>
    </div>

    <div id="addSubtaskModalOverlay" class="modal-overlay" style="display: none;"></div>
    <div id="addSubtaskModal" class="modal-content" style="display: none;">
        <span id="addSubtaskCloseModal" class="close">&times;</span>
        <p style="color: #ABABAB; font-size: 14px;">Добавление подзадачи</p>
        <p id="currUserEmail" style="display: none">@Model._userService.email</p>
        <hr style="border: 0; height: 2px; background: #B5B5B5;">
        <form id="addSubTaskForm" method="post" asp-page-handler="CreateSubTask" enctype="multipart/form-data">
            <div style="">
                <div class="form-field">
                    <p class="form-label">Наименование</p>
                    <input class="form-control addProjInput"
                           name="Name"
                           placeholder="Введите название задачи" />
                </div>

                <div class="form-field">
                    <p class="form-label">Описание</p>
                    <textarea class="form-control addProjTextArea"
                              name="Description"></textarea>
                </div>
                <input type="hidden" name="Task" id="addSubTaskId" />
                <div class="form-field">
                    <p class="form-label">Ответственный</p>
                    <select id="subtaskResponsibleSelect" name="Responsible" class="form-control">

                        <option></option>
                    </select>
                </div>
                <hr style="border: 0; height: 2px; background: #B5B5B5;">
                <div style="display: flex;">
                    <div style="display: flex; align-items: center; gap: 8px; margin-left: auto;">
                        <button type="submit" class="button">Создать</button>
                    </div>
                </div>
            </div>
        </form>
        <div id="searchResultsTask" style="margin-top: 16px;">
        </div>
    </div>



    <div id="participantsTaskList"></div>
}
<script>
    const addTaskButton = document.getElementById('addTaskButton');
    const addTaskModalOverlay = document.getElementById('addTaskModalOverlay');
    const addTaskModal = document.getElementById('addTaskModal');
    const addTaskCloseModal = document.getElementById('addTaskCloseModal');
    const addParticipantTaskBtn = document.getElementById('addParticipantTaskBtn');
    const addParticipantTaskModalOverlay = document.getElementById('addParticipantTaskModalOverlay');
    const addParticipantTaskModal = document.getElementById('addParticipantTaskModal');
    const addParticipantTaskCloseModal = document.getElementById('addParticipantTaskCloseModal');
    const addSubtaskBtn = document.getElementById('addSubtaskBtn');
    const addSubtaskModalOverlay = document.getElementById('addSubtaskModalOverlay');
    const addSubtaskModal = document.getElementById('addSubtaskModal');
    const addSubtaskCloseModal = document.getElementById('addSubtaskCloseModal');
    const searchResultsTask = document.getElementById('searchResultsTask');
    const selectedTaskUsers = [];
    const currUsersInTask = [];

    if (addTaskButton) {
        addTaskButton.addEventListener('click', () => {
            addTaskModalOverlay.style.display = 'block';
            addTaskModal.style.display = 'block';
            document.getElementById("editButton").innerText = "Создать";
            document.getElementById("taskIdInput").value = "";
            document.getElementById("nameWindow").innerText = "Создание задачи";
        });
    }

    if (addTaskCloseModal) {
        addTaskCloseModal.addEventListener('click', () => {
            addTaskModalOverlay.style.display = 'none';
            addTaskModal.style.display = 'none';
        });
    }

    if (addTaskModalOverlay) {
        addTaskModalOverlay.addEventListener('click', (event) => {
            if (event.target === addTaskModalOverlay) {
                addTaskModalOverlay.style.display = 'none';
                addTaskModal.style.display = 'none';
            }
        });
    }
    
    if (addParticipantTaskBtn) {
        addParticipantTaskBtn.addEventListener('click', () => {
            addParticipantTaskModalOverlay.style.display = 'block';
            addParticipantTaskModal.style.display = 'block';
        });
    }

    if (addParticipantTaskCloseModal) {
        addParticipantTaskCloseModal.addEventListener('click', () => {
            addParticipantTaskModalOverlay.style.display = 'none';
            addParticipantTaskModal.style.display = 'none';
            document.getElementById("participantTaskSearchInput").value = "";
            document.getElementById("searchResultsTask").innerHTML = "";
        });
    }

    if (addParticipantTaskModalOverlay) {
        addParticipantTaskModalOverlay.addEventListener('click', (event) => {
            if (event.target === addParticipantTaskModalOverlay) {
                addParticipantTaskModalOverlay.style.display = 'none';
                addParticipantTaskModal.style.display = 'none';
                document.getElementById("participantTaskSearchInput").value = "";
                document.getElementById("searchResultsTask").innerHTML = "";
            }
        });

    }

    if (addSubtaskBtn) {
        addSubtaskBtn.addEventListener('click', () => {
            populateSubtaskUserSelect();
            addSubtaskModalOverlay.style.display = 'block';
            addSubtaskModal.style.display = 'block';
        });
    }

    if (addSubtaskCloseModal) {
        addSubtaskCloseModal.addEventListener('click', () => {
            addSubtaskModalOverlay.style.display = 'none';
            addSubtaskModal.style.display = 'none';
        });
    }

    if (addSubtaskModalOverlay) {
        addSubtaskModalOverlay.addEventListener('click', (event) => {
            if (event.target === addSubtaskModalOverlay) {
                addSubtaskModalOverlay.style.display = 'none';
                addSubtaskModal.style.display = 'none';
            }
        });

    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    function addUser(email, name, isResponsible) {
        if (selectedTaskUsers.some(participant => participant.email === email)) {
            alert('Участник уже добавлен');
            return;
        }

        const participant = { email, name, isResponsible };
        selectedTaskUsers.push(participant);
        sendArrayToServer();
        addParticipantTaskModal.style.display = 'none';
        addParticipantTaskModalOverlay.style.display = 'none';

        const searchInput = document.getElementById('participantTaskSearchInput');
        searchInput.value = '';
        const searchResults = document.getElementById('searchResultsTask');
        searchResults.innerHTML = '';

        const usersInProjectTask = document.getElementById('usersInProjectTask');
        const userElement = createUserElement(email, name, isResponsible);
        usersInProjectTask.appendChild(userElement);
    }

    async function sendArrayToServer() {

        const response = await fetch('?handler=ProcessArray', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(selectedTaskUsers)
        });

    }

    function createUserElement(email, name, isResponsible) {
        const userDiv = document.createElement('div');
        userDiv.style.border = '1px solid #D2D2D2';
        userDiv.style.borderRadius = '8px';
        userDiv.style.background = '#FCFCFC';
        userDiv.style.display = 'flex';
        userDiv.style.padding = '9px 16px';
        userDiv.style.justifyContent = 'space-between';
        userDiv.style.alignItems = 'center';
        userDiv.style.marginBottom = '5px';

        userDiv.setAttribute('data-email', email);
        console.log(isResponsible);
        if (isResponsible){
            userDiv.innerHTML = `
                    <div style="display: flex; align-items: center;">
                        <img src="/Images/big-ico.png" style="width: 20px; height: 20px; margin-right: 10px;" />
                        <p style="font-size: 13px; color: #232323;">${name}</p>
                    </div>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <img src="/Images/blue_star.png" style="width: 18px; height: 16px;" />
                        <img src="/Images/remove.png" style="width: 14px; height: 14px; cursor: pointer;" onclick="removeUser('${email}')"/>
                    </div>
                `;
        }
        else {
            userDiv.innerHTML = `
                    <div style="display: flex; align-items: center;">
                        <img src="/Images/big-ico.png" style="width: 20px; height: 20px; margin-right: 10px;" />
                        <p style="font-size: 13px; color: #232323;">${name}</p>
                    </div>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <img src="/Images/star.png" style="width: 18px; height: 16px;" />
                        <img src="/Images/remove.png" style="width: 14px; height: 14px; cursor: pointer;" onclick="removeUser('${email}')"/>
                    </div>
                `;
        }


        return userDiv;
    }
    function removeUser(email) {
        const index = selectedTaskUsers.findIndex(participant => participant.email === email);
        if (index !== -1) {
            selectedTaskUsers.splice(index, 1);
        }

        const usersInProjectTask = document.getElementById('usersInProjectTask');
        const userElement = usersInProjectTask.querySelector(`div[data-email="${email}"]`);
        if (userElement) {
            userElement.remove();
        }
        sendArrayToServer();
    }

    participantTaskSearchInput.addEventListener('input', function () {
        const email = participantTaskSearchInput.value.trim();
        if (!email) {
            searchResultsTask.innerHTML = '';
            return;
        }

        const projectId = document.getElementById('projId').value;
        if (!projectId) {
            console.error('ID проекта не найден');
            searchResultsTask.innerHTML = '<p>Ошибка: ID проекта не указан</p>';
            return;
        }

        const token = getCookie('token');
        if (!token) {
            console.error('Токен не найден в cookies');
            searchResultsTask.innerHTML = '<p>Ошибка авторизации</p>';
            return;
        }

        fetch(`https://localhost:7136/api/auth/search-project?email=${encodeURIComponent(email)}&project=${encodeURIComponent(projectId)}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            credentials: 'include'
        })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 401) {
                        throw new Error('Не авторизован');
                    }
                    throw new Error('Ошибка сети');
                }
                return response.json();
            })
            .then(data => {
                searchResultsTask.innerHTML = '';
                const currUserEmail = document.getElementById('currUserEmail');
                if (data.length === 0) {
                    searchResultsTask.innerHTML = '<p>Пользователь не найден</p>';
                    return;
                }

                data.forEach(user => {
                    if (selectedTaskUsers.some(participant => participant.email === user.email)) {
                        return;
                    }
                    const userDiv = document.createElement('div');
                    userDiv.style.display = 'flex';
                    userDiv.style.justifyContent = 'space-between';
                    userDiv.style.alignItems = 'center';
                    userDiv.style.padding = '8px';
                    userDiv.style.paddingRight = '0px';
                    userDiv.style.borderBottom = '1px solid #D2D2D2';

                    
                    userDiv.innerHTML = `
                    <div style="display: flex; align-items: center;">
                        <img src="/Images/big-ico.png" style="width: 20px; height: 20px; margin-right: 10px;" />
                        <p style="font-size: 13px; color: #232323;">${user.name} </p>
                        <p style="font-size: 13px; color: #232323;">${user.surname} </p>
                    </div>
                    <button class="button" style="width: 100px;" onclick="addUser('${user.email}', '${user.name} ${user.surname}')">Добавить</button>
                `;
                    searchResultsTask.appendChild(userDiv);
                });
            })
            .catch(error => {
                console.error('Ошибка при поиске пользователя:', error);
                searchResultsTask.innerHTML = `<p>${error.message}</p>`;
            });
    });


    function handleTaskUpdateClick(id, name, description, status, projectId, access) {
        const usersInProjectTask = document.getElementById('usersInProjectTask');
        const canEdit = access === "True" || access === true || access === "1";
        selectedTaskUsers.length = 0;
        
        addTaskModalOverlay.style.display = 'block';
        addTaskModal.style.display = 'block';

        document.getElementById("editTaskName").value = name;
        document.getElementById("editTaskDescription").value = description;
        document.getElementById("projId").value = projectId;
        console.log(document.getElementById("projId").value);
        document.getElementById("taskIdInput").value = id;
        document.getElementById("nameWindow").innerText = "Изменение задачи";
        document.getElementById("editButton").innerText = "Изменить";
        document.getElementById("addSubTaskId").value = id;

        usersInProjectTask.innerHTML = '';
        loadUsersForProject(id);

        if (canEdit){
            document.getElementById("editTaskName").readOnly = false;
            document.getElementById("editTaskDescription").readOnly = false;
            document.getElementById("editButton").style.display = "";
            addSubtaskBtn.style.display = "";
            addParticipantTaskBtn.style.display = "";
        }
        else {
            document.getElementById("editTaskName").readOnly = true;
            document.getElementById("editTaskDescription").readOnly = true;
            document.getElementById("editButton").style.display = "none";
            addSubtaskBtn.style.display = "none";
            addParticipantTaskBtn.style.display = "none";
        }

        try{
            fetch('/Tasks?handler=GetUsers', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ taskId: id })
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        const data = result.data;

                        if (Array.isArray(data)) {
                            currUsersInTask.length = 0;
                            data.forEach(user => {
                                currUsersInTask.push({
                                    email: user.email,
                                    name: user.name,
                                    surname: user.surname
                                });
                            });
                        } else {
                            console.error('Ошибка: data не является массивом', data);
                        }
                    } else {
                        console.error('Ошибка на стороне сервера:', result.message);
                    }
                });
        } catch (error) {
            console.error(error);
            usersInProjectTask.innerHTML = '<p>Не удалось загрузить пользователей</p>';
        }
    }

    async function loadUsersForProject(taskId) {
        const usersInProject = document.getElementById('usersInProjectTask');
        usersInProject.innerHTML = '<p>Загрузка пользователей...</p>';

        try {
            const response = await fetch(`/Tasks?handler=LoadTaskUsers&taskId=${taskId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ taskId })
            });

            if (!response.ok) throw new Error("Ошибка сети");

            const result = await response.json();

            if (!result.success) {
                usersInProject.innerHTML = `<p>${result.message}</p>`;
                return;
            }

            usersInProjectTask.innerHTML = '';

            result.users.forEach(user => {
                addUser(user.email, user.name + ' ' + user.surname, user.isResponsible)
            });

        } catch (error) {
            console.error(error);
            usersInProjectTask.innerHTML = '<p>Не удалось загрузить пользователей</p>';
        }
    }

    function populateSubtaskUserSelect() {
        const select = document.getElementById('subtaskResponsibleSelect');
        select.innerHTML = ''; 
        if (currUsersInTask.length === 0) {
            const option = document.createElement('option');
            option.value = '';
            option.textContent = 'Нет пользователей';
            option.disabled = true;
            option.selected = true;
            select.appendChild(option);
        } else {
            currUsersInTask.forEach(user => {
                const option = document.createElement('option');
                option.value = user.email; 
                option.textContent = `${user.name} ${user.surname}`;
                select.appendChild(option);
            });
        }
    }

    document.getElementById('addSubTaskForm').addEventListener('submit', async function (e) {
        e.preventDefault(); 

        const formData = new FormData(this); 

        try {
            const response = await fetch(this.action, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: formData
            });

            const result = await response.json();


            if (result.success) {
                document.getElementById('addSubtaskModal').style.display = 'none';
                document.getElementById('addSubtaskModalOverlay').style.display = 'none';

                this.reset();
            } else {
                alert('Ошибка: ' + (result.message || 'Не удалось создать подзадачу'));
            }
        } catch (error) {
            console.error('Ошибка:', error);
            alert('Произошла ошибка при отправке формы.');
        }
    });

</script>


