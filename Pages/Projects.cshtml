@page
@using ProjManagmentSystem.Services
@model ProjectsModel
@{
    ViewData["Title"] = "Projects";
    bool isEditMode = false;
    var isProjectPage = ViewContext.RouteData.Values["Page"]?.ToString() == "/Projects";
    @inject UserService UserService
}



<div class="page-container">
    <div class="header" style="margin-top: 80px;">
        <h1>Проекты</h1>
        <form method="post">
            <button id="addProjButton2" type="button" class="button">Создать</button>
        </form>
    </div>
    <hr class="header-line">

    @if(Model.projects.Count == 0)
    {
        <div class="image-container" >
            <div >
                <div style="display: flex; justify-content: center; margin-bottom: 16px;">
                    <img src="~/Images/projimg.png" style="max-width: 100%;" />
                </div>
                <p  style="color: #ABABAB; font-size: 15px; text-align: center;margin-bottom: 16px;">У вас пока нет проектов</p>
                <form method="post" style="text-align: center;">
                    <button id="addProjButton" type="button" class="button">Создать проект</button>
                </form>
            </div>
        </div>
    }
    else
    {
        <div style=" overflow-y: auto; display: flex; flex-wrap: wrap; gap: 16px; padding-bottom: 50px; margin-bottom: 25px; margin-top: 25px; background-color: #FAFAFA; padding-left: 20px; padding-top: 20px; border-radius: 10px;">
            @{
                int count = 0;
            }
            @foreach (var i in Model.projects)
            {
                count++;
                <div style="background: #FFFFFF; width: calc(33% - 16px); height: 150px; padding: 8px; box-sizing: border-box; border-radius: 10px; box-shadow:0 2px 6px rgba(0,0,0,0.05);cursor:pointer;"
                     onclick="handleProjectUpdateClick('@i.id', '@i.Name', '@i.Description', '@i.creatorProj', '@i.Access')" data-project-name="@i.Name"
                     onmouseover="this.style.transform='translateY(-3px)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)';"
                     onmouseout="this.style.transform='translateY(0)';this.style.boxShadow='0 2px 6px rgba(0,0,0,0.05)';">
                    <p style="color: #D2D2D2; font-size: 11px; margin-left: 16px; margin-top: 8px;">№ @count</p>
                    <p style="display: none;">@i.id</p>
                    <p style="font-size: 16px; color: #000000; margin-bottom: 8px; margin-left: 16px;">@i.Name</p>
                    <p style="font-size: 14px; color: #232323; margin-bottom: 10px; margin-left: 16px;">Создатель: @i.creatorName</p>
                    <button type="button" class="button" onclick="handleProjectClick(event, '@i.Name', '@i.id')" style="width: calc(100% - 32px); margin-left: 16px; margin-right: 16px;">к задачам проекта</button>
                </div>
            }
        </div>
    }
</div>

@if (isProjectPage)
{
    <div id="addProjModalOverlay" class="modal-overlay" style="display: none;"></div>
    <div id="addProjModal" class="modal-content" style="display: none;">
        <span id="addProjCloseModal" class="close">&times;</span>
        <p style="color: #ABABAB; font-size: 14px;" id="nameWindow">Создание нового проекта</p>
        <hr style="border: 0; height: 2px; background: #B5B5B5;">
        <form id="addProjForm" method="post" asp-page-handler="CreateProject" enctype="multipart/form-data">
            <div >
                <h2 style="font-size: 18px; font-weight: 600; margin-bottom: 16px;">Данные проекта</h2>
                <input type="hidden" id="projectIdInput" name="EditingProjectId" value="" />
                <div class="form-field">
                    <p class="form-label">Наименование</p>
                    <div style="display: block;">
                        <input class="form-control addProjInput @(ModelState.ContainsKey("project.Name") ? "input-validation-error" : "")"
                               name="Name"
                               id="editName"
                               placeholder="Введите название проекта" />
                        @if (ModelState.ContainsKey("project.Name"))
                        {
                            <span class="field-validation-error">@ModelState["project.Name"].Errors.FirstOrDefault()?.ErrorMessage</span>
                        }
                    </div>
                </div>
                <input id="currentUserEmail" hidden value="@UserService.Email" />
                <div class="form-field">
                    <p class="form-label">Описание</p>
                    <div style="display: block;">
                        <textarea class="form-control addProjTextArea @(ModelState.ContainsKey("project.Description") ? "input-validation-error" : "")"
                                  id="editDescription"
                                  name="Description"></textarea>
                        @if (ModelState.ContainsKey("project.Description"))
                        {
                            <span class="field-validation-error">@ModelState["project.Description"].Errors.FirstOrDefault()?.ErrorMessage</span>
                        }
                    </div>
                </div>
                <h2 style="font-size: 18px; font-weight: 600; margin-bottom: 16px;">Участники проекта</h2>
                <p id="addParticipantBtn" style="color: #D9D9D9; font-size: 13px; margin-bottom: 8px; cursor: pointer;">+ Добавить участника</p>
                <div id="usersInProject">

                </div>
            </div>
            <hr style="border: 0; height: 2px; background: #B5B5B5;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; align-items: center; gap: 16px;" id="RemoveAndArchiveButtons">
                    <a id="openModalConfirm"
                       style="color: #EB0000; text-decoration: none; font-size: 14px; cursor: pointer;">
                        Удалить
                    </a>

                </div>

                <div style="display: flex; align-items: center; gap: 8px;">
                    <button type="button" class="button" id="buttonUpdateCreateProj">Создать</button>
                </div>
            </div>

        </form>
    </div>


    <div id="addParticipantModalOverlay" class="modal-overlay" style="display: none;"></div>
    <div id="addParticipantModal" class="modal-content" style="display: none; width: 700px">
        <span id="addParticipantCloseModal" class="close">&times;</span>
        <p style="color: #ABABAB; font-size: 14px;">Добавление участника</p>
        <p id="currUserEmail" style="display: none">@Model._userService.Email</p>
        <hr style="border: 0; height: 2px; background: #B5B5B5;">
        <div style="display: flex; align-content: center; align-items: center; justify-content:center;">
            <input id="participantSearchInput" class="form-control" placeholder="Введите почту пользователя" />
            
        </div>
        <div id="searchResults" style="margin-top: 16px;">
        </div>
    </div>



    <div id="participantsList"></div>

    <div id="modalConfirmOverlay" class="modal-overlay" style="display: none;"></div>

    <div id="modalConfirm" class="modal-content" style="display: none;">
        <span id="closeModalConfirm" class="close">&times;</span>
        <h2 style="font-weight: 600; font-size: 18px;">Подтверждение удаления проекта</h2>
        <p style="font-size: 14px;">Вы уверены, что хотите удалить проект? Это действие нельзя отменить.</p>
        <div style="display: flex; margin-top: 20px; justify-content: center; gap: 30px;">
            <button id="cancelDelete" style="background-color: #2954EC; border: none; padding: 10px 20px; border-radius: 14px; cursor: pointer;">Отмена</button>
            <form method="post">
                <input type="hidden" id="projectIdToDelete" name="projectId" />
                <button type="submit" asp-page-handler="DeleteProject" id="confirmDelete" style="background-color: white; color: #EB0000; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Удалить</button>
            </form>
        </div>
    </div>
}

<script>
    const addProjButton = document.getElementById('addProjButton');
    const addProjButton2 = document.getElementById('addProjButton2');
    const addProjModalOverlay = document.getElementById('addProjModalOverlay');
    const addProjModal = document.getElementById('addProjModal');
    const addProjCloseModal = document.getElementById('addProjCloseModal');
    const addParticipantBtn = document.getElementById('addParticipantBtn');
    const addParticipantModalOverlay = document.getElementById('addParticipantModalOverlay');
    const addParticipantModal = document.getElementById('addParticipantModal');
    const addParticipantCloseModal = document.getElementById('addParticipantCloseModal');
    const closeParticipantModalBtn = document.getElementById('closeParticipantModalBtn');
    const openModalConfirm = document.getElementById('openModalConfirm');
    const modalConfirm = document.getElementById('modalConfirm');
    const modalConfirmOverlay = document.getElementById('modalConfirmOverlay');
    const cancelDelete = document.getElementById('cancelDelete');
    const closeModalConfirm = document.getElementById('closeModalConfirm');
    const RemoveAndArchiveButtons = document.getElementById('RemoveAndArchiveButtons');
    const selectedUsers = [];

    if (addProjButton) {
        addProjButton.addEventListener('click', () => {
            selectedUsers.length = 0;
            console.log(selectedUsers);
            addProjModalOverlay.style.display = 'block';
            addProjModal.style.display = 'block';
            document.getElementById("buttonUpdateCreateProj").innerText = "Создать";
            document.getElementById("nameWindow").innerText = "Создание проекта";
            document.getElementById("projectIdInput").value = "";
            RemoveAndArchiveButtons.style.visibility = "hidden";
            RemoveAndArchiveButtons.style.width = "0";
            document.getElementById("editName").readOnly = false;
            document.getElementById("editDescription").readOnly = false;
            document.getElementById("editPublic").disabled = false;
            document.getElementById("buttonUpdateCreateProj").style.display = "";
            addParticipantBtn.style.display = "";
        });
    }

    if (addProjButton2) {
        addProjButton2.addEventListener('click', () => {
            selectedUsers.length = 0;
            console.log(selectedUsers);
            addProjModalOverlay.style.display = 'block';
            addProjModal.style.display = 'block';
            document.getElementById("editName").value = "";
            document.getElementById("editDescription").value = "";
            document.getElementById('usersInProject').innerHTML = '';
            document.getElementById("buttonUpdateCreateProj").innerText = "Создать";
            document.getElementById("nameWindow").innerText = "Создание проекта";
            document.getElementById("projectIdInput").value = "";
            RemoveAndArchiveButtons.style.visibility = "hidden";
            RemoveAndArchiveButtons.style.width = "0";
            document.getElementById("editName").readOnly = false;
            document.getElementById("editDescription").readOnly = false;
            document.getElementById("editPublic").disabled = false;
            document.getElementById("buttonUpdateCreateProj").style.display = "";
            addParticipantBtn.style.display = "";
        });
    }

    if (addProjCloseModal) {
        addProjCloseModal.addEventListener('click', () => {
            addProjModalOverlay.style.display = 'none';
            addProjModal.style.display = 'none';
            clearValidationErrors();
        });
    }

    if (addProjModalOverlay) {
        addProjModalOverlay.addEventListener('click', (event) => {
            if (event.target === addProjModalOverlay) {
                addProjModalOverlay.style.display = 'none';
                addProjModal.style.display = 'none';
                clearValidationErrors();
            }
        });
    }

    if (addParticipantBtn) {
        addParticipantBtn.addEventListener('click', () => {
            addParticipantModalOverlay.style.display = 'block';
            addParticipantModal.style.display = 'block';
        });
    }

    if (addParticipantCloseModal) {
        addParticipantCloseModal.addEventListener('click', () => {
            addParticipantModalOverlay.style.display = 'none';
            addParticipantModal.style.display = 'none';
        });
    }

    if (closeParticipantModalBtn) {
        closeParticipantModalBtn.addEventListener('click', () => {
            addParticipantModalOverlay.style.display = 'none';
            addParticipantModal.style.display = 'none';
        });
        
    }

    if (addParticipantModalOverlay) {
        addParticipantModalOverlay.addEventListener('click', (event) => {
            if (event.target === addParticipantModalOverlay) {
                addParticipantModalOverlay.style.display = 'none';
                addParticipantModal.style.display = 'none';
            }
        });
        
    }

    if (openModalConfirm) {
        openModalConfirm.addEventListener('click', (event) => {
            if (event.target === openModalConfirm) {
                const projectId = document.getElementById("projectIdInput").value;
                document.getElementById("projectIdToDelete").value = projectId;
                modalConfirm.style.display = 'block';
                modalConfirmOverlay.style.display = 'block';
            }
        });
    }

    if (cancelDelete) {
        cancelDelete.addEventListener('click', (event) => {
            if (event.target === cancelDelete) {
                modalConfirm.style.display = 'none';
                modalConfirmOverlay.style.display = 'none';
            }
        });
    }

    if (closeModalConfirm) {
        closeModalConfirm.addEventListener('click', () => {
            modalConfirmOverlay.style.display = 'none';
            modalConfirm.style.display = 'none';
        });
    }

    if (modalConfirmOverlay) {
        modalConfirmOverlay.addEventListener('click', (event) => {
            if (event.target === modalConfirmOverlay) {
                modalConfirmOverlay.style.display = 'none';
                modalConfirm.style.display = 'none';
            }
        });
    }

    participantSearchInput.addEventListener('input', function () {
        const email = participantSearchInput.value.trim();
        if (!email) {
            searchResults.innerHTML = '';
            return;
        }

        const token = getCookie('token');
        if (!token) {
            console.error('Токен не найден в cookies');
            searchResults.innerHTML = '<p>Ошибка авторизации</p>';

            return;
        }
        console.log(token);
        fetch(`https://localhost:7136/api/auth/search?email=${encodeURIComponent(email)}`, {
            headers: {
                'Authorization': `Bearer ${token}`
            },
            credentials: 'include'
        })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 401) {
                        throw new Error('Не авторизован');
                    }
                    throw new Error('Ошибка сети');
                }
                return response.json();
            })
            .then(data => {
                searchResults.innerHTML = '';
                const currUserEmail = document.getElementById('currUserEmail');
                if (data.length === 0) {
                    searchResults.innerHTML = '<p>Пользователь не найден</p>';
                    return;
                }

                data.forEach(user => {
                    if (selectedUsers.some(participant => participant.Email === user.email) || user.email === currUserEmail.textContent) {
                        return;
                    }
                    const userDiv = document.createElement('div');
                    userDiv.style.display = 'flex';
                    userDiv.style.justifyContent = 'space-between';
                    userDiv.style.alignItems = 'center';
                    userDiv.style.padding = '8px';
                    userDiv.style.paddingRight = '0px';
                    userDiv.style.borderBottom = '1px solid #D2D2D2';

                    userDiv.innerHTML = `
                            <div style="display: flex; align-items: center;">
                                <img src="/Images/big-ico.png" style="width: 20px; height: 20px; margin-right: 10px;" />
                                <p style="font-size: 13px; color: #232323;">${user.name} </p>
                                <p style="font-size: 13px; color: #232323;">${user.surname} </p>
                            </div>
                                        <button class="button" style="width: 100px;" onclick="addUser('${user.email}', '${user.name} ${user.surname}')">Добавить</button>
                        `;
                    searchResults.appendChild(userDiv);
                });
            })
            .catch(error => {
                console.error('Ошибка при поиске пользователя:', error);
                searchResults.innerHTML = `<p>${error.message}</p>`;
            });


    });


    document.getElementById("buttonUpdateCreateProj").addEventListener("click", async function (e) {
        e.preventDefault();

        const form = document.getElementById("addProjForm");
        const formData = new FormData(form);
        formData.append("SelectedUsersToProject", JSON.stringify(selectedUsers));

        try {
            const response = await fetch(form.action, {
                method: "POST",
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                    'Accept': 'application/json'
                },
                body: formData
            });

            if (response.ok) {
                window.location.reload();
            } else {
                const errorData = await response.json();
                clearValidationErrors();

                if (errorData.errors) {
                    displayValidationErrors(errorData.errors);
                } else {
                    alert("Ошибка при создании проекта");
                }
            }
        } catch (error) {
            console.error("Ошибка:", error);
            alert(error);
        }
    });

    function clearValidationErrors() {
        document.querySelectorAll('.field-validation-error').forEach(el => el.remove());
        document.querySelectorAll('.input-validation-error').forEach(el => el.classList.remove('input-validation-error'));
    }

    function displayValidationErrors(errors) {
        for (const [field, messages] of Object.entries(errors)) {
            const input = document.querySelector(`[name="${field}"]`);
            if (input) {
                input.classList.add('input-validation-error');

                const errorContainer = document.createElement('span');
                errorContainer.className = 'field-validation-error';
                errorContainer.textContent = messages.join(', ');

                input.parentNode.appendChild(errorContainer);
            }
        }
    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    function addUser(email, name, isResponsible, canEdit) {
        if (selectedUsers.some(participant => participant.Email === email)) {
            alert('Участник уже добавлен');
            return;
        }

        const participant = { Email: email, Name: name, IsResponsible: isResponsible };
        selectedUsers.push(participant);

        sendArrayToServer();

        addParticipantModal.style.display = 'none';
        addParticipantModalOverlay.style.display = 'none';

        const searchInput = document.getElementById('participantSearchInput');
        searchInput.value = '';
        const searchResults = document.getElementById('searchResults');
        searchResults.innerHTML = '';

        const usersInProject = document.getElementById('usersInProject');
        updateUI(canEdit);
    }

    function toggleResponsibility(email, canEdit) {
        const user = selectedUsers.find(u => u.Email === email);
        const currentUserEmail = document.getElementById("currentUserEmail")?.value;
        if (email === currentUserEmail) {

            return;
        }
        if (!user) return;

        user.IsResponsible = !user.IsResponsible;

        updateUI(canEdit);

        sendArrayToServer();
    }

    function updateUI(canEdit) {
        const usersInProject = document.getElementById('usersInProject');
        usersInProject.innerHTML = '';

        selectedUsers.forEach(u => {
            if (selectedUsers.length <= 1) {
                const element = createUserElement(u.Email, u.Name, u.IsResponsible, false);
                console.log(u.Email);
                console.log(u.IsResponsible);
                usersInProject.appendChild(element);
            } else {
                const element = createUserElement(u.Email, u.Name, u.IsResponsible, canEdit);
                console.log(u.Email);
                console.log(u.IsResponsible);
                usersInProject.appendChild(element);
            }
        });
    }

    function createUserElement(email, name, isResponsible = false, canEdit = false) {
        const userDiv = document.createElement('div');
        userDiv.style.border = '1px solid #D2D2D2';
        userDiv.style.borderRadius = '8px';
        userDiv.style.background = '#FCFCFC';
        userDiv.style.display = 'flex';
        userDiv.style.padding = '9px 16px';
        userDiv.style.justifyContent = 'space-between';
        userDiv.style.alignItems = 'center';
        userDiv.style.marginBottom = '5px';
        userDiv.setAttribute('data-email', email);

        const starImg = document.createElement('img');
        starImg.src = isResponsible ? '/Images/blue_star.png' : '/Images/star.png';
        starImg.style.width = '18px';
        starImg.style.height = '16px';
        starImg.style.cursor = canEdit ? 'pointer' : 'auto';

        if (canEdit) {
            starImg.addEventListener('click', () => toggleResponsibility(email, canEdit));
        }

        const removeImg = document.createElement('img');
        removeImg.src = '/Images/remove.png';
        removeImg.style.width = '14px';
        removeImg.style.height = '14px';
        removeImg.style.cursor = canEdit ? 'pointer' : 'auto';
        if (canEdit) {
            removeImg.addEventListener('click', () => removeUser(email));
        }


        const rightContainer = document.createElement('div');
        rightContainer.style.display = 'flex';
        rightContainer.style.gap = '10px';
        rightContainer.style.alignItems = 'center';
        rightContainer.appendChild(starImg);
        rightContainer.appendChild(removeImg);

        const leftContainer = document.createElement('div');
        leftContainer.style.display = 'flex';
        leftContainer.style.alignItems = 'center';
        leftContainer.innerHTML = `
                <img src="/Images/big-ico.png" style="width: 20px; height: 20px; margin-right: 10px;" />
                <p style="font-size: 13px; color: #232323;">${name}</p>
            `;

        userDiv.appendChild(leftContainer);
        userDiv.appendChild(rightContainer);

        return userDiv;
    }

    function removeUser(email) {
        const index = selectedUsers.findIndex(participant => participant.Email === email);
        const currentUserEmail = document.getElementById("currentUserEmail")?.value;
        if (email === currentUserEmail) {
            
            return;
        }
        if (index !== -1) {
            selectedUsers.splice(index, 1); 
        }
        const usersInProject = document.getElementById('usersInProject');
        const userElement = usersInProject.querySelector(`div[data-email="${email}"]`);
        if (userElement) {
            userElement.remove(); 
        }
        sendArrayToServer();
    }

    function handleProjectClick(event, projectName, projectId) {
        event.stopPropagation();
        const url = `/Tasks?projectName=${encodeURIComponent(projectName)}&projectId=${encodeURIComponent(projectId)}`;
        window.location.href = url;
    }

    function handleProjectUpdateClick(projectId, name, description, creatorProj, access) {

        const canEdit = access === "True" || access === true || access === "1";
        selectedUsers.length = 0;

        addProjModalOverlay.style.display = 'block';
        addProjModal.style.display = 'block';

        document.getElementById("editName").value = name;
        document.getElementById("editDescription").value = description;
        document.getElementById("nameWindow").innerText = "Изменение проекта";
        document.getElementById("buttonUpdateCreateProj").innerText = "Изменить";
        document.getElementById("projectIdInput").value = projectId;
        document.getElementById('usersInProject').innerHTML = '';
        RemoveAndArchiveButtons.style.visibility = "";
        RemoveAndArchiveButtons.style.width = "";

        loadUsersForProject(projectId, canEdit);
        if (canEdit) {
            document.getElementById("editName").readOnly = false;
            document.getElementById("editDescription").readOnly = false;
            document.getElementById("editPublic").disabled = false;
            document.getElementById("buttonUpdateCreateProj").style.display = "";
            addParticipantBtn.style.display = "";
        }
        else{
            document.getElementById("editName").readOnly = true;
            document.getElementById("editDescription").readOnly = true;
            document.getElementById("editPublic").disabled = true;
            document.getElementById("buttonUpdateCreateProj").style.display = "none";
            addParticipantBtn.style.display = "none";
        }
        
        
    }

    async function sendArrayToServer() {

        const response = await fetch('?handler=ProcessArray', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(selectedUsers)
        });

    }

    async function loadUsersForProject(projectId, canEdit) {
        const usersInProject = document.getElementById('usersInProject');
        usersInProject.innerHTML = '<p>Загрузка пользователей...</p>';

        try {
            const response = await fetch(`/Projects?handler=LoadProjectUsers&projectId=${projectId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ projectId })
            });

            if (!response.ok) throw new Error("Ошибка сети");

            const result = await response.json();

            if (!result.success) {
                usersInProject.innerHTML = `<p>${result.message}</p>`;
                return;
            }

            usersInProject.innerHTML = '';

            result.users.forEach(user => {
                addUser(user.email, user.name + ' ' + user.surname, user.isResponsible, canEdit);
            });

        } catch (error) {
            console.error(error);
            usersInProject.innerHTML = '<p>Не удалось загрузить пользователей</p>';
        }
    }

</script>

