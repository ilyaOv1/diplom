@page
@model ProjectsModel
@{
	ViewData["Title"] = "Projects";
    var isProjectPage = ViewContext.RouteData.Values["Page"]?.ToString() == "/Projects";
}



<div class="page-container">
    <div class="header" style="margin-top: 80px;">
        <h1>Проекты</h1>
        <form method="post">
            <button id="addProjButton2" type="button" class="button">Создать</button>
        </form>
    </div>
    <hr class="header-line">

    @if(Model.projects.Count == 0)
    {
        <div class="image-container" >
            <div >
                <div style="display: flex; justify-content: center; margin-bottom: 16px;">
                    <img src="~/Images/projimg.png" style="max-width: 100%;" />
                </div>
                <p  style="color: #ABABAB; font-size: 15px; text-align: center;margin-bottom: 16px;">У вас пока нет проектов</p>
                <form method="post" style="text-align: center;">
                    <button id="addProjButton" type="button" class="button">Создать проект</button>
                </form>
            </div>
        </div>
    }
    else
    {
        <div style="height: 100vh; overflow-y: auto; display: flex; flex-wrap: wrap; gap: 16px; padding-bottom: 50px; margin-bottom: 25px; margin-top: 25px; background-color: #FAFAFA; padding-left: 20px; padding-top: 20px; border-radius: 10px;">
            @{
                int count = 0;
            }
            @foreach (var i in Model.projects)
            {
                count++;
                <div style="background: #FFFFFF; width: calc(33% - 16px); height: 150px; padding: 8px; box-sizing: border-box; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);"
                     onclick="handleProjectClick(event, '@i.Name')"
                     data-project-name="@i.Name">
                    <p style="color: #D2D2D2; font-size: 11px; margin-left: 16px; margin-top: 8px;">№ @count</p>
                    <p style="font-size: 16px; color: #000000; margin-bottom: 8px; margin-left: 16px;">@i.Name</p>
                    <p style="font-size: 14px; color: #232323; margin-bottom: 10px; margin-left: 16px;">Создатель:</p>
                    <button type="button" class="button" style="width: calc(100% - 32px); margin-left: 16px; margin-right: 16px;">к задачам проекта</button>
                </div>
            }
        </div>
    }
</div>

@if (isProjectPage)
{
    <div id="addProjModalOverlay" class="modal-overlay" style="display: none;"></div>
    <div id="addProjModal" class="modal-content" style="display: none;">
        <span id="addProjCloseModal" class="close">&times;</span>
        <p style="color: #ABABAB; font-size: 14px;">Создание нового проекта</p>
        <hr style="border: 0; height: 2px; background: #B5B5B5;">
        <form id="addProjForm" method="post" asp-page-handler="CreateProject" enctype="multipart/form-data">
            <div >
                <h2 style="font-size: 18px; font-weight: 600; margin-bottom: 16px;">Данные проекта</h2>
                <div class="form-field">
                    <p class="form-label">Наименование</p>
                    <input class="form-control addProjInput"
                           name="Name"
                           placeholder="Введите название проекта" />
                </div>

                <div class="form-field">
                    <p class="form-label">Описание</p>
                    <textarea class="form-control addProjTextArea"
                              name="Description"></textarea>
                </div>

                <div class="form-field">
                    <p class="form-label">Публичность</p>
                    <select name="IsPrivate" class="form-control">
                        <option value="0">Публичный</option>
                        <option value="1">Приватный</option>
                    </select>
                </div>
                <h2 style="font-size: 18px; font-weight: 600; margin-bottom: 16px;">Участники проекта</h2>
                <p id="addParticipantBtn" style="color: #D9D9D9; font-size: 13px; margin-bottom: 8px;">+ Добавить участника</p>
                <div id="usersInProject">

                </div>
            </div>
            <hr style="border: 0; height: 2px; background: #B5B5B5;">
            <div style="display: flex;">
                <div style="display: flex; align-items: center; gap: 8px; margin-left: auto;">
                    <button  type="submit" class="button">Создать</button>
                </div>
            </div>

        </form>
    </div>


    <div id="addParticipantModalOverlay" class="modal-overlay" style="display: none;"></div>
    <div id="addParticipantModal" class="modal-content" style="display: none;">
        <span id="addParticipantCloseModal" class="close">&times;</span>
        <p style="color: #ABABAB; font-size: 14px;">Добавление участника</p>
        <p id="currUserEmail" style="display: none">@Model._userService.email</p>
        <hr style="border: 0; height: 2px; background: #B5B5B5;">
        <div style="display: flex; align-content: center; align-items: center; justify-content:center;">
            <input id="participantSearchInput" class="form-control" placeholder="Введите почту пользователя" />
            
        </div>
        <div id="searchResults" style="margin-top: 16px;">
        </div>
    </div>



    <div id="participantsList"></div>
}

<script>
    const addProjButton = document.getElementById('addProjButton');
    const addProjButton2 = document.getElementById('addProjButton2');
    const addProjModalOverlay = document.getElementById('addProjModalOverlay');
    const addProjModal = document.getElementById('addProjModal');
    const addProjCloseModal = document.getElementById('addProjCloseModal');

    if (addProjButton) {
        addProjButton.addEventListener('click', () => {

            addProjModalOverlay.style.display = 'block';
            addProjModal.style.display = 'block';
        });
    }

    if (addProjButton2) {
        addProjButton2.addEventListener('click', () => {

            addProjModalOverlay.style.display = 'block';
            addProjModal.style.display = 'block';
        });
    }

    if (addProjCloseModal) {
        addProjCloseModal.addEventListener('click', () => {
            addProjModalOverlay.style.display = 'none';
            addProjModal.style.display = 'none';
        });
    }

    if (addProjModalOverlay) {
        addProjModalOverlay.addEventListener('click', (event) => {
            if (event.target === addProjModalOverlay) {
                addProjModalOverlay.style.display = 'none';
                addProjModal.style.display = 'none';
            }
        });
    }

    const addParticipantBtn = document.getElementById('addParticipantBtn'); 
    const addParticipantModalOverlay = document.getElementById('addParticipantModalOverlay');
    const addParticipantModal = document.getElementById('addParticipantModal');
    const addParticipantCloseModal = document.getElementById('addParticipantCloseModal');
    const closeParticipantModalBtn = document.getElementById('closeParticipantModalBtn');
    const selectedUsers = [];

    if (addParticipantBtn) {
        addParticipantBtn.addEventListener('click', () => {
            addParticipantModalOverlay.style.display = 'block';
            addParticipantModal.style.display = 'block';
        });
    }

    if (addParticipantCloseModal) {
        addParticipantCloseModal.addEventListener('click', () => {
            addParticipantModalOverlay.style.display = 'none';
            addParticipantModal.style.display = 'none';
        });
    }

    if (closeParticipantModalBtn) {
        closeParticipantModalBtn.addEventListener('click', () => {
            addParticipantModalOverlay.style.display = 'none';
            addParticipantModal.style.display = 'none';
        });
        
    }

    if (addParticipantModalOverlay) {
        addParticipantModalOverlay.addEventListener('click', (event) => {
            if (event.target === addParticipantModalOverlay) {
                addParticipantModalOverlay.style.display = 'none';
                addParticipantModal.style.display = 'none';
            }
        });
        
    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    function addUser(email, name) {
        if (selectedUsers.some(participant => participant.email === email)) {
            alert('Участник уже добавлен');
            return;
        }

        const participant = { email, name };
        selectedUsers.push(participant);

        sendArrayToServer();

        addParticipantModal.style.display = 'none';
        addParticipantModalOverlay.style.display = 'none';

        const searchInput = document.getElementById('participantSearchInput');
        searchInput.value = '';
        const searchResults = document.getElementById('searchResults');
        searchResults.innerHTML = '';

        const usersInProject = document.getElementById('usersInProject');
        const userElement = createUserElement(email, name); 
        usersInProject.appendChild(userElement); 
    }

    async function sendArrayToServer() {

        const response = await fetch('?handler=ProcessArray', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(selectedUsers)
        });

    }

    participantSearchInput.addEventListener('input', function () {
        const email = participantSearchInput.value.trim();
        if (!email) {
            searchResults.innerHTML = ''; 
            return;
        }

        const token = getCookie('token');
        if (!token) {
            console.error('Токен не найден в cookies');
            searchResults.innerHTML = '<p>Ошибка авторизации</p>';
            
            return;
        }
        console.log(token);
        fetch(`https://localhost:7136/api/auth/search?email=${encodeURIComponent(email)}`, {
            headers: {
                'Authorization': `Bearer ${token}`
            },
            credentials: 'include'
        })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 401) {
                        throw new Error('Не авторизован');
                    }
                    throw new Error('Ошибка сети');
                }
                return response.json();
            })
            .then(data => {
                searchResults.innerHTML = '';
                const currUserEmail = document.getElementById('currUserEmail');
                if (data.length === 0) {
                    searchResults.innerHTML = '<p>Пользователь не найден</p>';
                    return;
                }

                data.forEach(user => {
                    if (selectedUsers.some(participant => participant.email === user.email) || user.email === currUserEmail.textContent) {
                        return; 
                    }
                    const userDiv = document.createElement('div');
                    userDiv.style.display = 'flex';
                    userDiv.style.justifyContent = 'space-between';
                    userDiv.style.alignItems = 'center';
                    userDiv.style.padding = '8px';
                    userDiv.style.paddingRight = '0px';
                    userDiv.style.borderBottom = '1px solid #D2D2D2';

                    userDiv.innerHTML = `
                        <div style="display: flex; align-items: center;">
                            <img src="/Images/big-ico.png" style="width: 20px; height: 20px; margin-right: 10px;" />
                            <p style="font-size: 13px; color: #232323;">${user.name} </p>
                            <p style="font-size: 13px; color: #232323;">${user.surname} </p>
                        </div>
                                    <button class="button" style="width: 100px;" onclick="addUser('${user.email}', '${user.name} ${user.surname}' )">Добавить</button>
                    `;
                    searchResults.appendChild(userDiv);
                });
            })
            .catch(error => {
                console.error('Ошибка при поиске пользователя:', error);
                searchResults.innerHTML = `<p>${error.message}</p>`;
            });

        
    });

    function createUserElement(email, name) {
        const userDiv = document.createElement('div');
        userDiv.style.border = '1px solid #D2D2D2';
        userDiv.style.borderRadius = '8px';
        userDiv.style.background = '#FCFCFC';
        userDiv.style.display = 'flex';
        userDiv.style.padding = '9px 16px';
        userDiv.style.justifyContent = 'space-between';
        userDiv.style.alignItems = 'center';
        userDiv.style.marginBottom = '5px';

        userDiv.setAttribute('data-email', email);

        userDiv.innerHTML = `
            <div style="display: flex; align-items: center;">
                <img src="/Images/big-ico.png" style="width: 20px; height: 20px; margin-right: 10px;" />
                <p style="font-size: 13px; color: #232323;">${name}</p>
            </div>
            <div style="display: flex; gap: 10px; align-items: center;">
                <img src="/Images/star.png" style="width: 18px; height: 16px;" />
                <img src="/Images/remove.png" style="width: 14px; height: 14px; cursor: pointer;" onclick="removeUser('${email}')"/>
            </div>
        `;

        return userDiv;
    }

    function removeUser(email) {
        const index = selectedUsers.findIndex(participant => participant.email === email);
        if (index !== -1) {
            selectedUsers.splice(index, 1); 
        }

        const usersInProject = document.getElementById('usersInProject');
        const userElement = usersInProject.querySelector(`div[data-email="${email}"]`);
        if (userElement) {
            userElement.remove(); 
        }
        sendArrayToServer();
    }

    function handleProjectClick(event, projectName) {
        if (!event.target.closest('button')) {
            const url = `/Tasks?projectName=${encodeURIComponent(projectName)}`;
            window.location.href = url;
        }
    }
</script>

